/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1336.0, "series": [{"data": [[0.0, 2.0], [0.1, 18.0], [0.2, 28.0], [0.3, 35.0], [0.4, 41.0], [0.5, 45.0], [0.6, 47.0], [0.7, 52.0], [0.8, 59.0], [0.9, 62.0], [1.0, 70.0], [1.1, 77.0], [1.2, 80.0], [1.3, 81.0], [1.4, 81.0], [1.5, 82.0], [1.6, 82.0], [1.7, 82.0], [1.8, 83.0], [1.9, 83.0], [2.0, 83.0], [2.1, 83.0], [2.2, 84.0], [2.3, 84.0], [2.4, 84.0], [2.5, 84.0], [2.6, 84.0], [2.7, 84.0], [2.8, 85.0], [2.9, 85.0], [3.0, 85.0], [3.1, 85.0], [3.2, 85.0], [3.3, 85.0], [3.4, 85.0], [3.5, 86.0], [3.6, 86.0], [3.7, 86.0], [3.8, 86.0], [3.9, 86.0], [4.0, 86.0], [4.1, 86.0], [4.2, 86.0], [4.3, 86.0], [4.4, 87.0], [4.5, 87.0], [4.6, 87.0], [4.7, 87.0], [4.8, 87.0], [4.9, 87.0], [5.0, 87.0], [5.1, 87.0], [5.2, 87.0], [5.3, 87.0], [5.4, 88.0], [5.5, 88.0], [5.6, 88.0], [5.7, 88.0], [5.8, 88.0], [5.9, 88.0], [6.0, 88.0], [6.1, 88.0], [6.2, 88.0], [6.3, 88.0], [6.4, 88.0], [6.5, 88.0], [6.6, 89.0], [6.7, 89.0], [6.8, 89.0], [6.9, 89.0], [7.0, 89.0], [7.1, 89.0], [7.2, 89.0], [7.3, 89.0], [7.4, 89.0], [7.5, 89.0], [7.6, 89.0], [7.7, 89.0], [7.8, 89.0], [7.9, 89.0], [8.0, 90.0], [8.1, 90.0], [8.2, 90.0], [8.3, 90.0], [8.4, 90.0], [8.5, 90.0], [8.6, 90.0], [8.7, 90.0], [8.8, 90.0], [8.9, 90.0], [9.0, 90.0], [9.1, 90.0], [9.2, 90.0], [9.3, 90.0], [9.4, 90.0], [9.5, 91.0], [9.6, 91.0], [9.7, 91.0], [9.8, 91.0], [9.9, 91.0], [10.0, 91.0], [10.1, 91.0], [10.2, 91.0], [10.3, 91.0], [10.4, 91.0], [10.5, 91.0], [10.6, 91.0], [10.7, 91.0], [10.8, 91.0], [10.9, 91.0], [11.0, 91.0], [11.1, 91.0], [11.2, 91.0], [11.3, 91.0], [11.4, 92.0], [11.5, 92.0], [11.6, 92.0], [11.7, 92.0], [11.8, 92.0], [11.9, 92.0], [12.0, 92.0], [12.1, 92.0], [12.2, 92.0], [12.3, 92.0], [12.4, 92.0], [12.5, 92.0], [12.6, 92.0], [12.7, 92.0], [12.8, 92.0], [12.9, 92.0], [13.0, 92.0], [13.1, 92.0], [13.2, 92.0], [13.3, 92.0], [13.4, 93.0], [13.5, 93.0], [13.6, 93.0], [13.7, 93.0], [13.8, 93.0], [13.9, 93.0], [14.0, 93.0], [14.1, 93.0], [14.2, 93.0], [14.3, 93.0], [14.4, 93.0], [14.5, 93.0], [14.6, 93.0], [14.7, 93.0], [14.8, 93.0], [14.9, 93.0], [15.0, 93.0], [15.1, 93.0], [15.2, 93.0], [15.3, 93.0], [15.4, 93.0], [15.5, 93.0], [15.6, 93.0], [15.7, 94.0], [15.8, 94.0], [15.9, 94.0], [16.0, 94.0], [16.1, 94.0], [16.2, 94.0], [16.3, 94.0], [16.4, 94.0], [16.5, 94.0], [16.6, 94.0], [16.7, 94.0], [16.8, 94.0], [16.9, 94.0], [17.0, 94.0], [17.1, 94.0], [17.2, 94.0], [17.3, 94.0], [17.4, 94.0], [17.5, 94.0], [17.6, 94.0], [17.7, 94.0], [17.8, 94.0], [17.9, 94.0], [18.0, 94.0], [18.1, 94.0], [18.2, 94.0], [18.3, 95.0], [18.4, 95.0], [18.5, 95.0], [18.6, 95.0], [18.7, 95.0], [18.8, 95.0], [18.9, 95.0], [19.0, 95.0], [19.1, 95.0], [19.2, 95.0], [19.3, 95.0], [19.4, 95.0], [19.5, 95.0], [19.6, 95.0], [19.7, 95.0], [19.8, 95.0], [19.9, 95.0], [20.0, 95.0], [20.1, 95.0], [20.2, 95.0], [20.3, 95.0], [20.4, 95.0], [20.5, 95.0], [20.6, 95.0], [20.7, 95.0], [20.8, 95.0], [20.9, 95.0], [21.0, 95.0], [21.1, 96.0], [21.2, 96.0], [21.3, 96.0], [21.4, 96.0], [21.5, 96.0], [21.6, 96.0], [21.7, 96.0], [21.8, 96.0], [21.9, 96.0], [22.0, 96.0], [22.1, 96.0], [22.2, 96.0], [22.3, 96.0], [22.4, 96.0], [22.5, 96.0], [22.6, 96.0], [22.7, 96.0], [22.8, 96.0], [22.9, 96.0], [23.0, 96.0], [23.1, 96.0], [23.2, 96.0], [23.3, 96.0], [23.4, 96.0], [23.5, 96.0], [23.6, 96.0], [23.7, 96.0], [23.8, 96.0], [23.9, 96.0], [24.0, 96.0], [24.1, 96.0], [24.2, 96.0], [24.3, 97.0], [24.4, 97.0], [24.5, 97.0], [24.6, 97.0], [24.7, 97.0], [24.8, 97.0], [24.9, 97.0], [25.0, 97.0], [25.1, 97.0], [25.2, 97.0], [25.3, 97.0], [25.4, 97.0], [25.5, 97.0], [25.6, 97.0], [25.7, 97.0], [25.8, 97.0], [25.9, 97.0], [26.0, 97.0], [26.1, 97.0], [26.2, 97.0], [26.3, 97.0], [26.4, 97.0], [26.5, 97.0], [26.6, 97.0], [26.7, 97.0], [26.8, 97.0], [26.9, 97.0], [27.0, 97.0], [27.1, 97.0], [27.2, 97.0], [27.3, 97.0], [27.4, 97.0], [27.5, 97.0], [27.6, 97.0], [27.7, 98.0], [27.8, 98.0], [27.9, 98.0], [28.0, 98.0], [28.1, 98.0], [28.2, 98.0], [28.3, 98.0], [28.4, 98.0], [28.5, 98.0], [28.6, 98.0], [28.7, 98.0], [28.8, 98.0], [28.9, 98.0], [29.0, 98.0], [29.1, 98.0], [29.2, 98.0], [29.3, 98.0], [29.4, 98.0], [29.5, 98.0], [29.6, 98.0], [29.7, 98.0], [29.8, 98.0], [29.9, 98.0], [30.0, 98.0], [30.1, 98.0], [30.2, 98.0], [30.3, 98.0], [30.4, 98.0], [30.5, 98.0], [30.6, 98.0], [30.7, 98.0], [30.8, 98.0], [30.9, 98.0], [31.0, 98.0], [31.1, 98.0], [31.2, 98.0], [31.3, 98.0], [31.4, 99.0], [31.5, 99.0], [31.6, 99.0], [31.7, 99.0], [31.8, 99.0], [31.9, 99.0], [32.0, 99.0], [32.1, 99.0], [32.2, 99.0], [32.3, 99.0], [32.4, 99.0], [32.5, 99.0], [32.6, 99.0], [32.7, 99.0], [32.8, 99.0], [32.9, 99.0], [33.0, 99.0], [33.1, 99.0], [33.2, 99.0], [33.3, 99.0], [33.4, 99.0], [33.5, 99.0], [33.6, 99.0], [33.7, 99.0], [33.8, 99.0], [33.9, 99.0], [34.0, 99.0], [34.1, 99.0], [34.2, 99.0], [34.3, 99.0], [34.4, 99.0], [34.5, 99.0], [34.6, 99.0], [34.7, 99.0], [34.8, 99.0], [34.9, 99.0], [35.0, 99.0], [35.1, 99.0], [35.2, 99.0], [35.3, 100.0], [35.4, 100.0], [35.5, 100.0], [35.6, 100.0], [35.7, 100.0], [35.8, 100.0], [35.9, 100.0], [36.0, 100.0], [36.1, 100.0], [36.2, 100.0], [36.3, 100.0], [36.4, 100.0], [36.5, 100.0], [36.6, 100.0], [36.7, 100.0], [36.8, 100.0], [36.9, 100.0], [37.0, 100.0], [37.1, 100.0], [37.2, 100.0], [37.3, 100.0], [37.4, 100.0], [37.5, 100.0], [37.6, 100.0], [37.7, 100.0], [37.8, 100.0], [37.9, 100.0], [38.0, 100.0], [38.1, 100.0], [38.2, 100.0], [38.3, 100.0], [38.4, 100.0], [38.5, 100.0], [38.6, 100.0], [38.7, 100.0], [38.8, 100.0], [38.9, 100.0], [39.0, 100.0], [39.1, 100.0], [39.2, 100.0], [39.3, 101.0], [39.4, 101.0], [39.5, 101.0], [39.6, 101.0], [39.7, 101.0], [39.8, 101.0], [39.9, 101.0], [40.0, 101.0], [40.1, 101.0], [40.2, 101.0], [40.3, 101.0], [40.4, 101.0], [40.5, 101.0], [40.6, 101.0], [40.7, 101.0], [40.8, 101.0], [40.9, 101.0], [41.0, 101.0], [41.1, 101.0], [41.2, 101.0], [41.3, 101.0], [41.4, 101.0], [41.5, 101.0], [41.6, 101.0], [41.7, 101.0], [41.8, 101.0], [41.9, 101.0], [42.0, 101.0], [42.1, 101.0], [42.2, 101.0], [42.3, 101.0], [42.4, 101.0], [42.5, 101.0], [42.6, 101.0], [42.7, 101.0], [42.8, 101.0], [42.9, 101.0], [43.0, 101.0], [43.1, 101.0], [43.2, 102.0], [43.3, 102.0], [43.4, 102.0], [43.5, 102.0], [43.6, 102.0], [43.7, 102.0], [43.8, 102.0], [43.9, 102.0], [44.0, 102.0], [44.1, 102.0], [44.2, 102.0], [44.3, 102.0], [44.4, 102.0], [44.5, 102.0], [44.6, 102.0], [44.7, 102.0], [44.8, 102.0], [44.9, 102.0], [45.0, 102.0], [45.1, 102.0], [45.2, 102.0], [45.3, 102.0], [45.4, 102.0], [45.5, 102.0], [45.6, 102.0], [45.7, 102.0], [45.8, 102.0], [45.9, 102.0], [46.0, 102.0], [46.1, 102.0], [46.2, 102.0], [46.3, 102.0], [46.4, 102.0], [46.5, 102.0], [46.6, 102.0], [46.7, 102.0], [46.8, 102.0], [46.9, 102.0], [47.0, 103.0], [47.1, 103.0], [47.2, 103.0], [47.3, 103.0], [47.4, 103.0], [47.5, 103.0], [47.6, 103.0], [47.7, 103.0], [47.8, 103.0], [47.9, 103.0], [48.0, 103.0], [48.1, 103.0], [48.2, 103.0], [48.3, 103.0], [48.4, 103.0], [48.5, 103.0], [48.6, 103.0], [48.7, 103.0], [48.8, 103.0], [48.9, 103.0], [49.0, 103.0], [49.1, 103.0], [49.2, 103.0], [49.3, 103.0], [49.4, 103.0], [49.5, 103.0], [49.6, 103.0], [49.7, 103.0], [49.8, 103.0], [49.9, 103.0], [50.0, 103.0], [50.1, 103.0], [50.2, 103.0], [50.3, 103.0], [50.4, 103.0], [50.5, 103.0], [50.6, 103.0], [50.7, 103.0], [50.8, 104.0], [50.9, 104.0], [51.0, 104.0], [51.1, 104.0], [51.2, 104.0], [51.3, 104.0], [51.4, 104.0], [51.5, 104.0], [51.6, 104.0], [51.7, 104.0], [51.8, 104.0], [51.9, 104.0], [52.0, 104.0], [52.1, 104.0], [52.2, 104.0], [52.3, 104.0], [52.4, 104.0], [52.5, 104.0], [52.6, 104.0], [52.7, 104.0], [52.8, 104.0], [52.9, 104.0], [53.0, 104.0], [53.1, 104.0], [53.2, 104.0], [53.3, 104.0], [53.4, 104.0], [53.5, 104.0], [53.6, 104.0], [53.7, 104.0], [53.8, 104.0], [53.9, 104.0], [54.0, 104.0], [54.1, 104.0], [54.2, 104.0], [54.3, 105.0], [54.4, 105.0], [54.5, 105.0], [54.6, 105.0], [54.7, 105.0], [54.8, 105.0], [54.9, 105.0], [55.0, 105.0], [55.1, 105.0], [55.2, 105.0], [55.3, 105.0], [55.4, 105.0], [55.5, 105.0], [55.6, 105.0], [55.7, 105.0], [55.8, 105.0], [55.9, 105.0], [56.0, 105.0], [56.1, 105.0], [56.2, 105.0], [56.3, 105.0], [56.4, 105.0], [56.5, 105.0], [56.6, 105.0], [56.7, 105.0], [56.8, 105.0], [56.9, 105.0], [57.0, 105.0], [57.1, 105.0], [57.2, 105.0], [57.3, 105.0], [57.4, 105.0], [57.5, 105.0], [57.6, 105.0], [57.7, 105.0], [57.8, 105.0], [57.9, 106.0], [58.0, 106.0], [58.1, 106.0], [58.2, 106.0], [58.3, 106.0], [58.4, 106.0], [58.5, 106.0], [58.6, 106.0], [58.7, 106.0], [58.8, 106.0], [58.9, 106.0], [59.0, 106.0], [59.1, 106.0], [59.2, 106.0], [59.3, 106.0], [59.4, 106.0], [59.5, 106.0], [59.6, 106.0], [59.7, 106.0], [59.8, 106.0], [59.9, 106.0], [60.0, 106.0], [60.1, 106.0], [60.2, 106.0], [60.3, 106.0], [60.4, 106.0], [60.5, 106.0], [60.6, 106.0], [60.7, 106.0], [60.8, 106.0], [60.9, 106.0], [61.0, 106.0], [61.1, 106.0], [61.2, 107.0], [61.3, 107.0], [61.4, 107.0], [61.5, 107.0], [61.6, 107.0], [61.7, 107.0], [61.8, 107.0], [61.9, 107.0], [62.0, 107.0], [62.1, 107.0], [62.2, 107.0], [62.3, 107.0], [62.4, 107.0], [62.5, 107.0], [62.6, 107.0], [62.7, 107.0], [62.8, 107.0], [62.9, 107.0], [63.0, 107.0], [63.1, 107.0], [63.2, 107.0], [63.3, 107.0], [63.4, 107.0], [63.5, 107.0], [63.6, 107.0], [63.7, 107.0], [63.8, 107.0], [63.9, 107.0], [64.0, 107.0], [64.1, 107.0], [64.2, 108.0], [64.3, 108.0], [64.4, 108.0], [64.5, 108.0], [64.6, 108.0], [64.7, 108.0], [64.8, 108.0], [64.9, 108.0], [65.0, 108.0], [65.1, 108.0], [65.2, 108.0], [65.3, 108.0], [65.4, 108.0], [65.5, 108.0], [65.6, 108.0], [65.7, 108.0], [65.8, 108.0], [65.9, 108.0], [66.0, 108.0], [66.1, 108.0], [66.2, 108.0], [66.3, 108.0], [66.4, 108.0], [66.5, 108.0], [66.6, 108.0], [66.7, 108.0], [66.8, 108.0], [66.9, 108.0], [67.0, 109.0], [67.1, 109.0], [67.2, 109.0], [67.3, 109.0], [67.4, 109.0], [67.5, 109.0], [67.6, 109.0], [67.7, 109.0], [67.8, 109.0], [67.9, 109.0], [68.0, 109.0], [68.1, 109.0], [68.2, 109.0], [68.3, 109.0], [68.4, 109.0], [68.5, 109.0], [68.6, 109.0], [68.7, 109.0], [68.8, 109.0], [68.9, 109.0], [69.0, 109.0], [69.1, 109.0], [69.2, 109.0], [69.3, 109.0], [69.4, 109.0], [69.5, 110.0], [69.6, 110.0], [69.7, 110.0], [69.8, 110.0], [69.9, 110.0], [70.0, 110.0], [70.1, 110.0], [70.2, 110.0], [70.3, 110.0], [70.4, 110.0], [70.5, 110.0], [70.6, 110.0], [70.7, 110.0], [70.8, 110.0], [70.9, 110.0], [71.0, 110.0], [71.1, 110.0], [71.2, 110.0], [71.3, 110.0], [71.4, 110.0], [71.5, 110.0], [71.6, 110.0], [71.7, 110.0], [71.8, 110.0], [71.9, 111.0], [72.0, 111.0], [72.1, 111.0], [72.2, 111.0], [72.3, 111.0], [72.4, 111.0], [72.5, 111.0], [72.6, 111.0], [72.7, 111.0], [72.8, 111.0], [72.9, 111.0], [73.0, 111.0], [73.1, 111.0], [73.2, 111.0], [73.3, 111.0], [73.4, 111.0], [73.5, 111.0], [73.6, 111.0], [73.7, 111.0], [73.8, 111.0], [73.9, 111.0], [74.0, 111.0], [74.1, 112.0], [74.2, 112.0], [74.3, 112.0], [74.4, 112.0], [74.5, 112.0], [74.6, 112.0], [74.7, 112.0], [74.8, 112.0], [74.9, 112.0], [75.0, 112.0], [75.1, 112.0], [75.2, 112.0], [75.3, 112.0], [75.4, 112.0], [75.5, 112.0], [75.6, 112.0], [75.7, 112.0], [75.8, 112.0], [75.9, 112.0], [76.0, 113.0], [76.1, 113.0], [76.2, 113.0], [76.3, 113.0], [76.4, 113.0], [76.5, 113.0], [76.6, 113.0], [76.7, 113.0], [76.8, 113.0], [76.9, 113.0], [77.0, 113.0], [77.1, 113.0], [77.2, 113.0], [77.3, 113.0], [77.4, 113.0], [77.5, 113.0], [77.6, 113.0], [77.7, 114.0], [77.8, 114.0], [77.9, 114.0], [78.0, 114.0], [78.1, 114.0], [78.2, 114.0], [78.3, 114.0], [78.4, 114.0], [78.5, 114.0], [78.6, 114.0], [78.7, 114.0], [78.8, 114.0], [78.9, 114.0], [79.0, 114.0], [79.1, 114.0], [79.2, 115.0], [79.3, 115.0], [79.4, 115.0], [79.5, 115.0], [79.6, 115.0], [79.7, 115.0], [79.8, 115.0], [79.9, 115.0], [80.0, 115.0], [80.1, 115.0], [80.2, 115.0], [80.3, 115.0], [80.4, 115.0], [80.5, 115.0], [80.6, 116.0], [80.7, 116.0], [80.8, 116.0], [80.9, 116.0], [81.0, 116.0], [81.1, 116.0], [81.2, 116.0], [81.3, 116.0], [81.4, 116.0], [81.5, 116.0], [81.6, 116.0], [81.7, 116.0], [81.8, 117.0], [81.9, 117.0], [82.0, 117.0], [82.1, 117.0], [82.2, 117.0], [82.3, 117.0], [82.4, 117.0], [82.5, 117.0], [82.6, 117.0], [82.7, 117.0], [82.8, 117.0], [82.9, 117.0], [83.0, 118.0], [83.1, 118.0], [83.2, 118.0], [83.3, 118.0], [83.4, 118.0], [83.5, 118.0], [83.6, 118.0], [83.7, 118.0], [83.8, 118.0], [83.9, 118.0], [84.0, 119.0], [84.1, 119.0], [84.2, 119.0], [84.3, 119.0], [84.4, 119.0], [84.5, 119.0], [84.6, 119.0], [84.7, 119.0], [84.8, 119.0], [84.9, 119.0], [85.0, 120.0], [85.1, 120.0], [85.2, 120.0], [85.3, 120.0], [85.4, 120.0], [85.5, 120.0], [85.6, 120.0], [85.7, 120.0], [85.8, 121.0], [85.9, 121.0], [86.0, 121.0], [86.1, 121.0], [86.2, 121.0], [86.3, 121.0], [86.4, 121.0], [86.5, 121.0], [86.6, 122.0], [86.7, 122.0], [86.8, 122.0], [86.9, 122.0], [87.0, 122.0], [87.1, 122.0], [87.2, 122.0], [87.3, 123.0], [87.4, 123.0], [87.5, 123.0], [87.6, 123.0], [87.7, 123.0], [87.8, 124.0], [87.9, 124.0], [88.0, 124.0], [88.1, 124.0], [88.2, 125.0], [88.3, 125.0], [88.4, 125.0], [88.5, 126.0], [88.6, 126.0], [88.7, 127.0], [88.8, 127.0], [88.9, 127.0], [89.0, 128.0], [89.1, 129.0], [89.2, 130.0], [89.3, 130.0], [89.4, 131.0], [89.5, 132.0], [89.6, 134.0], [89.7, 135.0], [89.8, 137.0], [89.9, 139.0], [90.0, 141.0], [90.1, 142.0], [90.2, 144.0], [90.3, 146.0], [90.4, 148.0], [90.5, 149.0], [90.6, 151.0], [90.7, 153.0], [90.8, 155.0], [90.9, 156.0], [91.0, 158.0], [91.1, 159.0], [91.2, 161.0], [91.3, 162.0], [91.4, 164.0], [91.5, 165.0], [91.6, 167.0], [91.7, 168.0], [91.8, 170.0], [91.9, 171.0], [92.0, 173.0], [92.1, 175.0], [92.2, 176.0], [92.3, 178.0], [92.4, 180.0], [92.5, 182.0], [92.6, 184.0], [92.7, 185.0], [92.8, 187.0], [92.9, 189.0], [93.0, 190.0], [93.1, 192.0], [93.2, 193.0], [93.3, 195.0], [93.4, 196.0], [93.5, 198.0], [93.6, 199.0], [93.7, 200.0], [93.8, 202.0], [93.9, 204.0], [94.0, 205.0], [94.1, 207.0], [94.2, 209.0], [94.3, 211.0], [94.4, 213.0], [94.5, 215.0], [94.6, 216.0], [94.7, 218.0], [94.8, 220.0], [94.9, 221.0], [95.0, 223.0], [95.1, 224.0], [95.2, 226.0], [95.3, 227.0], [95.4, 229.0], [95.5, 230.0], [95.6, 231.0], [95.7, 233.0], [95.8, 234.0], [95.9, 236.0], [96.0, 237.0], [96.1, 239.0], [96.2, 241.0], [96.3, 242.0], [96.4, 244.0], [96.5, 246.0], [96.6, 247.0], [96.7, 249.0], [96.8, 251.0], [96.9, 253.0], [97.0, 255.0], [97.1, 257.0], [97.2, 259.0], [97.3, 261.0], [97.4, 263.0], [97.5, 264.0], [97.6, 266.0], [97.7, 268.0], [97.8, 269.0], [97.9, 271.0], [98.0, 273.0], [98.1, 274.0], [98.2, 276.0], [98.3, 278.0], [98.4, 281.0], [98.5, 283.0], [98.6, 285.0], [98.7, 288.0], [98.8, 291.0], [98.9, 294.0], [99.0, 297.0], [99.1, 301.0], [99.2, 306.0], [99.3, 311.0], [99.4, 319.0], [99.5, 329.0], [99.6, 338.0], [99.7, 347.0], [99.8, 359.0], [99.9, 379.0], [100.0, 1336.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 583587.0, "series": [{"data": [[0.0, 352782.0], [600.0, 63.0], [700.0, 17.0], [800.0, 28.0], [200.0, 54224.0], [900.0, 31.0], [1000.0, 80.0], [1100.0, 17.0], [300.0, 8814.0], [1200.0, 21.0], [1300.0, 15.0], [400.0, 256.0], [100.0, 583587.0], [500.0, 65.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 336.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 999664.0, "series": [{"data": [[0.0, 999664.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 336.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1972.9037054603766, "minX": 1.58548716E12, "maxY": 1976.5437640438022, "series": [{"data": [[1.58548722E12, 1972.9037054603766], [1.58548716E12, 1976.5437640438022]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58548722E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 1100.6666666666665, "series": [{"data": [[2.0, 3.0], [3.0, 4.0], [4.0, 4.0], [5.0, 2.5], [6.0, 3.5], [7.0, 3.0], [8.0, 3.0], [9.0, 2.0], [10.0, 3.0], [12.0, 4.666666666666667], [15.0, 4.25], [16.0, 5.0], [17.0, 3.5], [21.0, 3.333333333333333], [23.0, 4.333333333333333], [26.0, 4.333333333333333], [30.0, 5.25], [31.0, 5.333333333333333], [35.0, 5.0], [37.0, 4.0], [38.0, 9.0], [41.0, 3.6666666666666665], [42.0, 11.0], [45.0, 6.0], [44.0, 5.0], [51.0, 7.0], [50.0, 5.0], [53.0, 4.0], [55.0, 4.0], [54.0, 4.0], [56.0, 4.25], [59.0, 5.0], [58.0, 5.0], [61.0, 5.0], [67.0, 5.0], [66.0, 5.0], [65.0, 4.5], [71.0, 6.0], [69.0, 6.0], [73.0, 7.0], [72.0, 6.0], [78.0, 6.0], [77.0, 6.0], [76.0, 6.0], [83.0, 6.5], [82.0, 7.0], [81.0, 8.0], [80.0, 7.0], [87.0, 6.6], [86.0, 7.0], [84.0, 6.0], [91.0, 9.5], [88.0, 6.666666666666667], [95.0, 6.0], [92.0, 6.0], [99.0, 7.0], [98.0, 9.0], [97.0, 7.0], [96.0, 6.5], [103.0, 6.5], [102.0, 8.4], [101.0, 9.333333333333334], [100.0, 6.4], [105.0, 7.0], [104.0, 7.666666666666667], [111.0, 8.75], [109.0, 7.777777777777778], [108.0, 7.0], [114.0, 8.333333333333334], [112.0, 7.666666666666667], [119.0, 8.4], [116.0, 7.666666666666667], [123.0, 10.25], [121.0, 8.6], [120.0, 9.0], [127.0, 8.5], [126.0, 10.0], [125.0, 9.0], [124.0, 8.0], [134.0, 8.666666666666666], [133.0, 8.0], [132.0, 9.0], [129.0, 8.4], [128.0, 7.5], [142.0, 9.0], [140.0, 9.416666666666668], [139.0, 8.0], [137.0, 9.0], [151.0, 11.5], [150.0, 12.0], [148.0, 14.0], [145.0, 8.500000000000002], [144.0, 10.0], [157.0, 10.666666666666666], [156.0, 16.0], [155.0, 10.285714285714286], [154.0, 10.0], [153.0, 9.5], [167.0, 12.0], [166.0, 11.333333333333334], [164.0, 9.2], [163.0, 14.5], [162.0, 11.0], [160.0, 22.0], [175.0, 11.666666666666666], [174.0, 12.0], [172.0, 11.0], [169.0, 10.2], [168.0, 8.0], [183.0, 13.2], [180.0, 8.5], [179.0, 13.0], [178.0, 12.0], [176.0, 12.0], [191.0, 10.375], [190.0, 9.8], [188.0, 11.0], [187.0, 11.2], [186.0, 12.333333333333334], [184.0, 13.0], [199.0, 14.0], [198.0, 15.0], [197.0, 12.0], [196.0, 12.666666666666666], [195.0, 12.0], [194.0, 12.0], [193.0, 11.8], [192.0, 9.0], [206.0, 11.0], [205.0, 13.0], [204.0, 15.25], [203.0, 15.0], [201.0, 12.0], [200.0, 13.0], [215.0, 15.5], [213.0, 18.0], [212.0, 13.8], [211.0, 13.4], [210.0, 11.874999999999998], [208.0, 11.0], [223.0, 12.555555555555555], [221.0, 16.0], [220.0, 16.0], [219.0, 12.666666666666666], [218.0, 14.666666666666666], [216.0, 15.5], [231.0, 14.777777777777777], [230.0, 15.0], [229.0, 15.0], [228.0, 15.0], [227.0, 17.666666666666668], [226.0, 14.0], [225.0, 13.857142857142856], [224.0, 13.0], [239.0, 14.666666666666666], [238.0, 15.181818181818182], [237.0, 13.0], [236.0, 14.5], [234.0, 15.333333333333334], [233.0, 15.5], [247.0, 15.571428571428571], [246.0, 15.0], [245.0, 15.0], [244.0, 16.666666666666668], [243.0, 17.333333333333332], [241.0, 16.5], [240.0, 16.0], [255.0, 17.5], [253.0, 17.0], [252.0, 15.0], [251.0, 13.833333333333334], [249.0, 14.0], [248.0, 15.0], [271.0, 17.937499999999996], [268.0, 15.999999999999998], [258.0, 18.75], [256.0, 16.0], [267.0, 16.307692307692307], [266.0, 15.5], [265.0, 15.25], [264.0, 14.454545454545455], [263.0, 11.5], [262.0, 16.0], [261.0, 15.0], [286.0, 15.4], [287.0, 16.75], [285.0, 16.874999999999996], [284.0, 17.166666666666668], [283.0, 28.0], [282.0, 19.166666666666668], [281.0, 17.5], [280.0, 16.75], [279.0, 19.0], [274.0, 17.0], [273.0, 16.666666666666668], [278.0, 17.25], [277.0, 17.5], [276.0, 16.42857142857143], [301.0, 16.25], [302.0, 16.833333333333336], [300.0, 14.5], [291.0, 17.72727272727273], [290.0, 17.0], [289.0, 16.0], [288.0, 17.333333333333332], [299.0, 16.0], [298.0, 14.0], [297.0, 16.0], [296.0, 18.0], [295.0, 19.0], [294.0, 18.571428571428573], [293.0, 25.0], [292.0, 18.75], [318.0, 17.0], [319.0, 16.0], [317.0, 16.5], [316.0, 17.0], [315.0, 22.0], [314.0, 18.8], [313.0, 19.6], [312.0, 19.666666666666664], [311.0, 16.866666666666664], [307.0, 19.666666666666664], [306.0, 17.5], [310.0, 24.0], [309.0, 16.0], [308.0, 22.25], [332.0, 18.75], [334.0, 18.0], [335.0, 18.666666666666668], [333.0, 16.0], [331.0, 16.0], [328.0, 19.5], [325.0, 19.0], [324.0, 23.5], [323.0, 18.1], [321.0, 17.25], [320.0, 15.5], [350.0, 21.571428571428573], [351.0, 20.571428571428573], [349.0, 16.333333333333332], [348.0, 18.4], [346.0, 20.4], [345.0, 20.0], [344.0, 19.583333333333336], [343.0, 19.0], [337.0, 18.0], [336.0, 16.666666666666668], [339.0, 18.0], [338.0, 19.5], [342.0, 18.857142857142858], [340.0, 20.384615384615387], [366.0, 19.0], [367.0, 21.0], [365.0, 22.5], [355.0, 21.0], [353.0, 18.8], [352.0, 18.0], [363.0, 22.09090909090909], [362.0, 17.8], [361.0, 18.0], [359.0, 19.0], [358.0, 17.666666666666668], [356.0, 19.384615384615383], [380.0, 21.6], [382.0, 21.666666666666668], [383.0, 20.5], [381.0, 22.0], [379.0, 24.0], [378.0, 21.0], [375.0, 21.166666666666668], [369.0, 19.0], [371.0, 21.2], [370.0, 18.333333333333332], [373.0, 20.11111111111111], [372.0, 20.0], [398.0, 22.625], [399.0, 20.5], [397.0, 25.0], [396.0, 22.666666666666668], [395.0, 24.0], [393.0, 23.8125], [392.0, 21.25], [391.0, 23.42857142857143], [387.0, 21.700000000000003], [386.0, 22.5], [390.0, 22.0], [389.0, 24.0], [413.0, 24.625], [414.0, 22.75], [412.0, 24.71428571428571], [403.0, 22.666666666666668], [401.0, 22.0], [400.0, 21.5], [411.0, 24.2], [410.0, 22.866666666666667], [409.0, 22.0], [408.0, 21.75], [406.0, 21.666666666666668], [405.0, 22.166666666666664], [404.0, 24.90909090909091], [430.0, 685.709677419355], [429.0, 242.66666666666669], [431.0, 769.75], [428.0, 27.0], [427.0, 25.666666666666664], [426.0, 25.857142857142858], [424.0, 23.0], [423.0, 25.0], [416.0, 23.2], [419.0, 23.666666666666668], [418.0, 23.0], [422.0, 23.555555555555557], [421.0, 27.0], [420.0, 25.71428571428572], [440.0, 420.77777777777777], [442.0, 550.4285714285713], [441.0, 638.3333333333334], [443.0, 701.3111111111111], [439.0, 404.19999999999993], [438.0, 421.6666666666667], [435.0, 742.0], [433.0, 22.857142857142858], [432.0, 23.083333333333332], [436.0, 118.18181818181822], [444.0, 424.44444444444446], [445.0, 233.41176470588238], [446.0, 575.25], [447.0, 645.9615384615385], [449.0, 473.4285714285715], [448.0, 433.68749999999994], [450.0, 717.5], [451.0, 269.5], [452.0, 501.9], [453.0, 723.5714285714286], [454.0, 231.71428571428575], [455.0, 529.5], [456.0, 397.12500000000006], [463.0, 561.0], [462.0, 25.066666666666666], [460.0, 459.8181818181818], [461.0, 698.3333333333334], [457.0, 384.33333333333337], [458.0, 205.5], [459.0, 839.5], [465.0, 341.00000000000006], [464.0, 390.75], [466.0, 338.75], [467.0, 381.83333333333337], [468.0, 333.625], [469.0, 383.6666666666667], [470.0, 272.5], [471.0, 233.99999999999994], [474.0, 1032.0], [476.0, 510.74999999999994], [477.0, 197.5], [478.0, 463.0], [479.0, 362.9375000000001], [473.0, 29.75], [472.0, 27.444444444444443], [475.0, 720.0], [493.0, 162.875], [480.0, 595.5], [494.0, 221.50000000000003], [495.0, 233.63636363636363], [492.0, 27.999999999999996], [483.0, 28.0], [482.0, 26.857142857142858], [481.0, 26.92307692307692], [491.0, 25.0], [489.0, 28.444444444444443], [486.0, 29.0], [485.0, 30.4], [484.0, 29.5], [497.0, 331.00000000000006], [496.0, 378.46153846153845], [498.0, 310.5], [499.0, 179.60000000000002], [500.0, 244.57142857142856], [501.0, 685.75], [502.0, 1100.6666666666665], [503.0, 355.2222222222222], [504.0, 100.85714285714285], [508.0, 1027.9999999999998], [510.0, 28.428571428571427], [509.0, 28.5], [511.0, 29.714285714285715], [505.0, 271.28571428571433], [506.0, 601.0], [507.0, 833.5], [536.0, 405.8333333333333], [528.0, 168.28571428571425], [524.0, 30.333333333333336], [522.0, 31.75], [520.0, 28.5], [526.0, 413.1333333333334], [514.0, 30.666666666666664], [512.0, 30.60869565217391], [518.0, 28.888888888888886], [516.0, 29.599999999999998], [538.0, 29.2], [540.0, 119.3], [542.0, 225.5], [530.0, 545.6428571428572], [532.0, 357.1111111111111], [534.0, 124.19999999999996], [546.0, 295.0], [544.0, 194.0], [556.0, 140.0], [558.0, 28.0], [554.0, 176.25], [548.0, 78.36363636363636], [550.0, 131.07142857142858], [560.0, 275.0], [574.0, 30.22222222222222], [572.0, 233.27777777777783], [570.0, 98.8], [568.0, 189.75], [562.0, 78.92307692307692], [564.0, 228.36363636363637], [566.0, 197.52941176470588], [552.0, 315.42857142857144], [600.0, 126.50000000000001], [582.0, 275.5714285714286], [580.0, 196.25], [590.0, 29.6], [576.0, 30.0], [588.0, 298.8571428571429], [604.0, 31.307692307692307], [602.0, 33.0], [606.0, 380.20000000000005], [592.0, 29.0], [594.0, 30.0], [596.0, 391.7692307692308], [598.0, 268.94444444444446], [584.0, 212.16666666666666], [586.0, 175.06250000000003], [610.0, 298.3076923076923], [608.0, 232.68421052631584], [622.0, 193.66666666666666], [620.0, 340.9], [618.0, 259.46666666666664], [612.0, 153.22222222222223], [632.0, 200.7142857142857], [634.0, 303.85714285714283], [636.0, 32.0], [638.0, 293.57142857142856], [624.0, 30.666666666666668], [626.0, 184.0769230769231], [628.0, 173.99999999999997], [630.0, 254.35714285714286], [616.0, 279.875], [642.0, 298.75], [640.0, 301.875], [654.0, 358.5], [652.0, 133.08695652173913], [650.0, 326.1111111111111], [644.0, 219.6], [646.0, 250.5], [656.0, 168.5], [670.0, 167.33333333333334], [668.0, 97.77272727272727], [666.0, 159.80000000000004], [664.0, 120.42857142857142], [658.0, 280.99999999999994], [660.0, 219.45454545454544], [662.0, 99.00000000000001], [648.0, 134.65625000000003], [674.0, 245.75], [672.0, 112.16000000000003], [686.0, 124.2142857142857], [684.0, 207.8], [682.0, 215.3809523809523], [676.0, 248.4], [678.0, 293.77777777777777], [688.0, 161.42105263157893], [702.0, 210.26666666666668], [700.0, 274.25], [698.0, 165.4375], [696.0, 92.34482758620688], [690.0, 118.57142857142857], [692.0, 159.0909090909091], [694.0, 212.20000000000002], [680.0, 244.5333333333333], [706.0, 193.54545454545453], [704.0, 211.90909090909093], [718.0, 116.00000000000001], [716.0, 150.49999999999997], [714.0, 102.1], [708.0, 175.46153846153845], [710.0, 108.81481481481481], [720.0, 102.9], [734.0, 93.3125], [732.0, 193.88], [730.0, 83.32142857142857], [728.0, 231.0], [722.0, 199.25000000000003], [724.0, 279.0], [726.0, 152.4], [712.0, 139.63636363636368], [738.0, 227.38461538461542], [736.0, 257.8], [750.0, 98.49999999999999], [748.0, 163.1], [746.0, 196.05], [740.0, 194.86666666666667], [742.0, 255.2857142857143], [752.0, 139.8], [766.0, 55.42857142857142], [764.0, 125.44444444444444], [762.0, 136.50000000000006], [760.0, 148.57692307692307], [754.0, 212.83333333333334], [756.0, 210.77777777777777], [758.0, 234.12500000000003], [744.0, 185.88888888888889], [770.0, 194.0], [768.0, 118.78571428571428], [782.0, 179.22222222222223], [780.0, 187.0454545454545], [778.0, 175.33333333333331], [772.0, 128.8461538461538], [774.0, 138.91666666666666], [784.0, 252.55555555555554], [798.0, 253.0], [794.0, 48.33333333333334], [796.0, 95.0], [792.0, 180.75], [786.0, 207.90909090909088], [788.0, 133.14285714285714], [790.0, 224.83333333333334], [776.0, 100.43589743589742], [828.0, 169.8947368421053], [806.0, 104.40909090909092], [824.0, 270.375], [826.0, 95.14999999999998], [830.0, 264.5], [816.0, 74.13461538461542], [818.0, 95.66666666666667], [820.0, 146.30000000000004], [822.0, 138.8235294117647], [808.0, 66.77777777777777], [810.0, 261.0], [812.0, 80.7], [814.0, 159.92857142857142], [804.0, 47.666666666666664], [802.0, 48.10526315789474], [800.0, 57.0], [834.0, 163.68421052631575], [832.0, 260.1818181818182], [846.0, 91.2105263157895], [844.0, 196.30434782608697], [842.0, 187.45], [836.0, 194.78787878787873], [838.0, 190.5], [848.0, 105.65384615384615], [862.0, 47.0], [860.0, 291.5], [858.0, 219.81818181818184], [856.0, 269.2727272727273], [850.0, 156.91304347826087], [852.0, 95.6060606060606], [854.0, 237.80769230769232], [840.0, 192.91666666666669], [868.0, 471.0], [866.0, 98.8181818181818], [864.0, 45.5], [878.0, 238.10000000000002], [876.0, 191.08333333333337], [870.0, 177.83333333333334], [880.0, 148.8571428571429], [894.0, 246.74999999999997], [892.0, 76.32000000000004], [890.0, 198.55555555555557], [888.0, 176.81818181818178], [882.0, 158.93333333333334], [884.0, 148.6153846153846], [886.0, 210.8666666666667], [872.0, 313.2], [874.0, 178.50000000000003], [898.0, 106.75], [896.0, 271.2666666666667], [910.0, 173.875], [908.0, 116.59459459459461], [906.0, 138.8378378378379], [900.0, 142.7058823529412], [902.0, 139.66666666666666], [912.0, 194.54545454545453], [926.0, 141.41666666666669], [924.0, 221.36842105263162], [922.0, 141.87878787878785], [920.0, 126.54166666666666], [914.0, 128.11111111111111], [916.0, 157.39999999999998], [918.0, 193.21739130434779], [904.0, 208.17391304347822], [930.0, 104.55000000000003], [928.0, 161.49999999999997], [942.0, 79.27272727272731], [940.0, 121.40000000000002], [938.0, 266.8823529411765], [932.0, 99.58333333333334], [934.0, 93.28846153846152], [944.0, 169.0], [958.0, 157.47368421052633], [956.0, 127.92857142857143], [954.0, 213.50000000000003], [952.0, 206.3157894736842], [946.0, 98.99999999999999], [948.0, 115.21875], [950.0, 226.28571428571422], [936.0, 156.35483870967738], [962.0, 131.62500000000003], [960.0, 190.25], [974.0, 193.35714285714283], [972.0, 228.99999999999997], [970.0, 158.44444444444446], [964.0, 238.42857142857142], [966.0, 194.0], [976.0, 221.0], [990.0, 102.09677419354834], [988.0, 224.2142857142857], [986.0, 110.8529411764706], [984.0, 237.2], [978.0, 115.80000000000004], [980.0, 133.73076923076923], [982.0, 218.0], [968.0, 172.7857142857143], [994.0, 90.32000000000001], [992.0, 154.7058823529412], [1006.0, 144.2631578947368], [1004.0, 96.73170731707314], [1002.0, 100.04166666666666], [996.0, 150.04761904761904], [998.0, 93.60000000000001], [1008.0, 188.72000000000003], [1022.0, 172.26315789473682], [1020.0, 101.36585365853658], [1018.0, 216.45454545454544], [1016.0, 219.9375], [1010.0, 192.93333333333334], [1012.0, 227.06666666666666], [1014.0, 194.2777777777778], [1000.0, 220.76923076923077], [1028.0, 123.95652173913048], [1024.0, 92.16666666666666], [1052.0, 222.46666666666667], [1048.0, 175.99999999999997], [1044.0, 193.8235294117647], [1040.0, 190.5], [1032.0, 219.78947368421052], [1072.0, 193.27272727272728], [1036.0, 47.5], [1076.0, 134.65], [1080.0, 181.46153846153857], [1084.0, 244.09999999999997], [1056.0, 161.75], [1060.0, 160.78947368421052], [1064.0, 186.99999999999997], [1068.0, 199.13333333333333], [1092.0, 167.74999999999997], [1088.0, 165.77419354838713], [1116.0, 189.84615384615384], [1112.0, 138.09999999999997], [1108.0, 262.35294117647055], [1104.0, 178.56521739130434], [1096.0, 133.0322580645161], [1100.0, 282.33333333333337], [1120.0, 161.7647058823529], [1148.0, 146.5925925925926], [1144.0, 124.54545454545449], [1140.0, 149.21428571428572], [1136.0, 167.54545454545453], [1124.0, 195.85], [1128.0, 177.4375], [1132.0, 146.26315789473682], [1156.0, 161.1578947368421], [1152.0, 160.2380952380952], [1180.0, 229.85714285714286], [1176.0, 238.29999999999998], [1172.0, 214.09090909090907], [1168.0, 123.02985074626866], [1160.0, 204.81818181818184], [1164.0, 132.31578947368422], [1184.0, 233.77777777777774], [1212.0, 183.26086956521738], [1208.0, 134.62499999999997], [1204.0, 161.7], [1200.0, 182.27272727272722], [1188.0, 133.25], [1192.0, 221.47058823529412], [1196.0, 235.05555555555554], [1220.0, 130.23636363636368], [1216.0, 116.89361702127657], [1244.0, 138.6842105263158], [1240.0, 164.67241379310343], [1236.0, 139.10526315789474], [1232.0, 156.1388888888889], [1224.0, 175.1470588235295], [1228.0, 185.72727272727275], [1248.0, 222.84210526315792], [1276.0, 315.5384615384615], [1272.0, 78.72222222222219], [1268.0, 210.16666666666669], [1264.0, 220.59999999999997], [1252.0, 72.0], [1256.0, 290.6363636363636], [1260.0, 259.0625], [1284.0, 255.8], [1280.0, 169.1], [1308.0, 184.94594594594594], [1304.0, 245.7027027027028], [1300.0, 187.97435897435898], [1288.0, 288.4117647058824], [1292.0, 390.125], [1312.0, 189.52777777777777], [1340.0, 319.0], [1336.0, 120.93076923076923], [1332.0, 206.94736842105263], [1328.0, 168.60655737704917], [1316.0, 296.54545454545456], [1320.0, 213.47826086956522], [1324.0, 294.45454545454544], [1296.0, 336.0], [1352.0, 319.75], [1356.0, 269.75000000000006], [1344.0, 354.0], [1372.0, 197.95121951219508], [1368.0, 301.0909090909091], [1364.0, 347.74999999999994], [1348.0, 324.72727272727275], [1392.0, 195.00000000000009], [1396.0, 176.81578947368422], [1400.0, 185.07142857142858], [1404.0, 230.7647058823529], [1376.0, 243.99999999999994], [1380.0, 221.28571428571428], [1384.0, 204.4117647058824], [1388.0, 285.0], [1360.0, 246.14814814814818], [1412.0, 151.52380952380952], [1408.0, 166.48], [1436.0, 248.12], [1432.0, 280.6842105263157], [1428.0, 258.68750000000006], [1416.0, 285.3333333333333], [1420.0, 202.04166666666666], [1440.0, 248.27272727272725], [1468.0, 159.05714285714288], [1464.0, 144.66666666666669], [1460.0, 196.7222222222222], [1456.0, 245.11764705882356], [1444.0, 219.46153846153845], [1448.0, 249.0952380952381], [1452.0, 284.5], [1424.0, 212.0588235294118], [1476.0, 171.9655172413793], [1472.0, 244.88235294117646], [1500.0, 235.26666666666665], [1496.0, 209.38461538461536], [1484.0, 126.15254237288143], [1480.0, 86.66666666666666], [1504.0, 214.54999999999998], [1532.0, 280.304347826087], [1528.0, 226.91666666666669], [1524.0, 321.0], [1520.0, 259.21428571428567], [1508.0, 258.3571428571429], [1512.0, 272.7142857142857], [1516.0, 314.8333333333333], [1488.0, 231.00000000000003], [1492.0, 135.95789473684206], [1540.0, 223.16666666666666], [1536.0, 182.26086956521732], [1564.0, 351.0], [1560.0, 123.52941176470587], [1556.0, 198.80769230769232], [1544.0, 194.74999999999997], [1548.0, 132.39285714285714], [1568.0, 242.2], [1596.0, 305.29411764705895], [1592.0, 304.89655172413796], [1588.0, 347.4736842105263], [1584.0, 162.27586206896558], [1572.0, 188.82608695652172], [1576.0, 164.52173913043478], [1580.0, 270.52631578947376], [1552.0, 263.7142857142858], [1604.0, 205.0454545454545], [1600.0, 227.87499999999997], [1628.0, 194.85714285714283], [1624.0, 303.2692307692308], [1620.0, 240.1764705882353], [1608.0, 304.28], [1612.0, 240.42105263157896], [1632.0, 221.34210526315795], [1660.0, 246.62500000000006], [1656.0, 273.24999999999994], [1652.0, 312.7727272727272], [1648.0, 248.25806451612905], [1636.0, 277.88571428571424], [1640.0, 271.0476190476191], [1644.0, 222.28571428571433], [1616.0, 189.5263157894737], [1668.0, 253.00000000000009], [1664.0, 286.5909090909092], [1692.0, 237.49999999999997], [1688.0, 235.82222222222222], [1672.0, 222.68749999999997], [1676.0, 250.21739130434784], [1696.0, 185.675], [1724.0, 194.92592592592592], [1720.0, 259.51515151515156], [1716.0, 262.28571428571433], [1712.0, 217.78787878787878], [1700.0, 228.4693877551021], [1704.0, 292.8], [1708.0, 262.85], [1680.0, 334.5454545454545], [1684.0, 101.75], [1732.0, 228.28070175438603], [1728.0, 298.0400000000001], [1756.0, 246.71874999999994], [1752.0, 163.13793103448276], [1748.0, 294.2000000000001], [1736.0, 292.85714285714283], [1740.0, 222.30952380952385], [1760.0, 276.0333333333333], [1788.0, 182.3076923076923], [1784.0, 194.34210526315786], [1780.0, 170.89999999999998], [1776.0, 195.08888888888885], [1764.0, 264.4615384615384], [1768.0, 179.86206896551724], [1772.0, 195.85999999999999], [1744.0, 271.9565217391304], [1796.0, 202.6296296296296], [1792.0, 174.0], [1820.0, 132.32258064516128], [1816.0, 207.79545454545453], [1812.0, 249.0454545454546], [1800.0, 241.15384615384613], [1804.0, 222.61290322580646], [1824.0, 210.33333333333334], [1852.0, 160.2297297297298], [1848.0, 238.05128205128202], [1844.0, 220.26315789473696], [1840.0, 267.2424242424243], [1832.0, 156.43478260869568], [1836.0, 162.53488372093025], [1808.0, 189.74193548387095], [1864.0, 216.578947368421], [1868.0, 286.11111111111114], [1856.0, 270.10256410256414], [1884.0, 261.29629629629625], [1880.0, 258.1818181818182], [1860.0, 47.666666666666664], [1904.0, 179.5454545454545], [1908.0, 165.93750000000006], [1912.0, 217.7083333333334], [1916.0, 32.333333333333336], [1888.0, 245.66666666666669], [1892.0, 163.34210526315783], [1896.0, 264.027027027027], [1900.0, 158.56000000000003], [1872.0, 254.5789473684211], [1876.0, 320.7142857142858], [1924.0, 116.47500000000001], [1920.0, 260.0], [1948.0, 218.2857142857143], [1944.0, 244.13793103448276], [1940.0, 221.86956521739125], [1928.0, 173.42857142857136], [1932.0, 262.06666666666666], [1952.0, 222.71428571428572], [1980.0, 261.09523809523813], [1976.0, 275.9655172413793], [1972.0, 111.3714285714286], [1968.0, 116.56097560975614], [1956.0, 215.75609756097563], [1960.0, 183.70000000000002], [1964.0, 111.8], [1936.0, 200.05882352941177], [1984.0, 114.76666666666667], [1988.0, 137.9767441860464], [1992.0, 156.64485981308417], [1996.0, 94.10487804878049], [2000.0, 111.90787545080207], [1025.0, 154.13888888888889], [1053.0, 162.1818181818182], [1049.0, 129.59374999999997], [1045.0, 85.2608695652174], [1041.0, 167.54166666666666], [1029.0, 240.0], [1033.0, 101.96428571428571], [1037.0, 46.86666666666667], [1073.0, 250.50000000000003], [1077.0, 184.42105263157893], [1081.0, 168.3888888888889], [1085.0, 229.87500000000003], [1057.0, 176.78947368421052], [1061.0, 215.15789473684208], [1065.0, 231.77777777777777], [1069.0, 116.11428571428573], [1089.0, 209.94444444444443], [1117.0, 219.76923076923077], [1113.0, 206.57142857142853], [1109.0, 179.44999999999996], [1105.0, 242.08333333333334], [1093.0, 169.73333333333335], [1097.0, 202.96774193548384], [1101.0, 153.53846153846152], [1149.0, 108.0], [1145.0, 119.78947368421055], [1141.0, 108.31818181818183], [1137.0, 145.76923076923077], [1121.0, 143.0], [1125.0, 175.05263157894734], [1129.0, 138.17391304347825], [1133.0, 164.35714285714283], [1153.0, 138.48148148148152], [1181.0, 121.87499999999999], [1177.0, 155.66666666666669], [1173.0, 138.23076923076923], [1169.0, 255.64285714285714], [1157.0, 101.25925925925931], [1161.0, 198.73684210526312], [1165.0, 97.30769230769232], [1213.0, 202.14285714285717], [1209.0, 246.125], [1205.0, 297.37500000000006], [1201.0, 156.76315789473682], [1185.0, 99.41379310344828], [1189.0, 116.03125000000004], [1193.0, 188.14285714285714], [1197.0, 203.0], [1217.0, 210.35714285714286], [1245.0, 135.89743589743588], [1241.0, 106.60919540229881], [1237.0, 168.61111111111111], [1233.0, 297.82352941176464], [1221.0, 169.41666666666669], [1225.0, 130.44444444444446], [1229.0, 268.8], [1265.0, 254.91666666666666], [1249.0, 101.99999999999997], [1273.0, 78.0], [1269.0, 78.4], [1277.0, 230.95454545454544], [1253.0, 243.93333333333328], [1257.0, 260.66666666666663], [1261.0, 270.625], [1285.0, 172.962962962963], [1281.0, 209.40909090909093], [1309.0, 291.0], [1305.0, 326.7741935483871], [1289.0, 321.11764705882354], [1293.0, 108.73333333333333], [1313.0, 130.73913043478262], [1341.0, 268.4761904761904], [1337.0, 278.2777777777778], [1333.0, 327.0], [1329.0, 176.59016393442624], [1317.0, 305.8], [1321.0, 342.1538461538462], [1325.0, 255.99999999999997], [1297.0, 91.10526315789473], [1301.0, 374.3529411764706], [1349.0, 177.58823529411765], [1345.0, 343.53846153846155], [1373.0, 179.47368421052641], [1369.0, 179.22727272727275], [1365.0, 328.625], [1353.0, 330.4], [1357.0, 244.56], [1377.0, 240.69230769230768], [1401.0, 91.25], [1405.0, 248.0370370370371], [1397.0, 243.42105263157902], [1393.0, 224.24999999999997], [1381.0, 270.2222222222223], [1385.0, 312.6363636363636], [1389.0, 196.2894736842105], [1361.0, 240.80952380952377], [1413.0, 266.50000000000006], [1409.0, 198.69387755102042], [1437.0, 207.1875], [1433.0, 220.26315789473688], [1429.0, 132.7], [1417.0, 183.74285714285713], [1421.0, 189.1304347826087], [1441.0, 277.5], [1469.0, 249.47368421052627], [1465.0, 191.0833333333333], [1461.0, 277.0], [1457.0, 241.0740740740741], [1445.0, 296.9333333333334], [1449.0, 247.79999999999998], [1453.0, 255.44444444444449], [1425.0, 173.0], [1481.0, 86.14285714285715], [1485.0, 279.75], [1473.0, 261.5909090909091], [1501.0, 228.85714285714283], [1497.0, 209.66666666666669], [1493.0, 298.1], [1477.0, 153.44444444444446], [1521.0, 260.2272727272727], [1525.0, 227.28571428571428], [1529.0, 203.4193548387097], [1533.0, 174.62500000000003], [1505.0, 298.71428571428567], [1509.0, 150.53333333333327], [1513.0, 208.41176470588232], [1517.0, 241.08333333333326], [1489.0, 208.4482758620689], [1541.0, 225.04166666666669], [1537.0, 216.31707317073167], [1565.0, 291.4615384615385], [1561.0, 326.4444444444445], [1557.0, 246.5652173913044], [1545.0, 260.38461538461536], [1549.0, 288.4], [1569.0, 262.4736842105263], [1597.0, 172.97872340425536], [1593.0, 205.3548387096774], [1589.0, 302.87499999999994], [1585.0, 235.4230769230769], [1573.0, 146.25], [1577.0, 171.19354838709674], [1581.0, 318.66666666666663], [1553.0, 222.86111111111117], [1605.0, 265.3333333333333], [1601.0, 212.36111111111117], [1629.0, 309.25], [1625.0, 252.92592592592592], [1621.0, 228.68965517241378], [1609.0, 259.7941176470587], [1613.0, 186.5], [1633.0, 272.13043478260875], [1661.0, 270.16666666666663], [1657.0, 243.61904761904765], [1653.0, 233.1578947368421], [1649.0, 310.375], [1637.0, 317.3333333333333], [1641.0, 318.44], [1645.0, 247.73076923076914], [1617.0, 305.3636363636364], [1669.0, 345.06249999999994], [1665.0, 198.1363636363637], [1693.0, 240.37499999999994], [1689.0, 281.75], [1673.0, 328.8333333333333], [1677.0, 258.26923076923083], [1697.0, 167.18181818181822], [1725.0, 261.9736842105263], [1721.0, 272.19354838709677], [1717.0, 279.95454545454544], [1713.0, 192.44680851063825], [1701.0, 292.1666666666667], [1705.0, 230.99999999999997], [1709.0, 266.8888888888889], [1681.0, 161.0], [1685.0, 310.55555555555554], [1733.0, 279.2], [1729.0, 213.4857142857143], [1757.0, 183.8481012658228], [1753.0, 245.64705882352945], [1749.0, 219.69999999999996], [1737.0, 152.55], [1741.0, 186.74324324324317], [1761.0, 282.0], [1789.0, 245.54545454545453], [1785.0, 222.0285714285714], [1781.0, 204.00000000000003], [1777.0, 206.6818181818182], [1765.0, 151.47999999999996], [1769.0, 235.29166666666669], [1773.0, 262.0740740740741], [1745.0, 182.99999999999997], [1797.0, 185.6], [1793.0, 206.67857142857147], [1821.0, 184.6], [1817.0, 239.25], [1813.0, 229.0], [1801.0, 173.73684210526318], [1805.0, 224.36842105263156], [1825.0, 76.54545454545455], [1853.0, 227.04166666666666], [1849.0, 264.18181818181824], [1845.0, 167.5333333333334], [1841.0, 242.50000000000003], [1829.0, 145.49999999999997], [1833.0, 212.0454545454545], [1837.0, 201.64], [1809.0, 123.2], [1861.0, 152.99999999999994], [1857.0, 246.39393939393946], [1885.0, 208.1428571428571], [1881.0, 227.70731707317074], [1877.0, 225.74285714285708], [1865.0, 255.30769230769232], [1869.0, 291.9615384615384], [1889.0, 161.65000000000003], [1917.0, 269.99999999999994], [1913.0, 239.07142857142853], [1909.0, 249.50000000000006], [1905.0, 182.04347826086948], [1893.0, 234.60000000000002], [1897.0, 186.52173913043478], [1901.0, 113.91836734693882], [1873.0, 310.12], [1925.0, 202.21276595744672], [1921.0, 261.12], [1949.0, 210.36842105263153], [1945.0, 213.99999999999997], [1941.0, 261.2647058823531], [1929.0, 263.9999999999999], [1933.0, 222.92592592592592], [1953.0, 232.58823529411762], [1981.0, 263.8928571428571], [1977.0, 159.40322580645164], [1973.0, 206.40000000000003], [1969.0, 184.52631578947376], [1957.0, 169.4090909090909], [1961.0, 234.68421052631578], [1965.0, 135.99999999999997], [1937.0, 231.25641025641028], [1985.0, 154.19354838709685], [1989.0, 169.88349514563103], [1993.0, 117.51776649746193], [1997.0, 109.19718309859154], [519.0, 29.0], [525.0, 749.6], [521.0, 30.181818181818183], [527.0, 410.00000000000006], [513.0, 29.533333333333328], [517.0, 28.666666666666668], [515.0, 28.916666666666664], [537.0, 585.0714285714287], [539.0, 188.62500000000003], [541.0, 126.375], [543.0, 250.42857142857144], [529.0, 194.92307692307693], [531.0, 531.4545454545455], [533.0, 614.8571428571429], [535.0, 229.6], [547.0, 223.71428571428575], [551.0, 313.85714285714283], [557.0, 31.714285714285715], [559.0, 131.7777777777778], [555.0, 260.07142857142856], [545.0, 207.33333333333331], [549.0, 239.0], [575.0, 31.71428571428572], [573.0, 353.2], [571.0, 359.0], [569.0, 267.71428571428567], [561.0, 146.125], [563.0, 198.63636363636363], [565.0, 219.6], [567.0, 155.22222222222226], [553.0, 90.57894736842108], [581.0, 364.0], [587.0, 232.2], [579.0, 121.25], [577.0, 30.8], [589.0, 198.8], [583.0, 116.43749999999997], [605.0, 290.6666666666667], [603.0, 33.0], [601.0, 34.0], [607.0, 161.8125], [593.0, 29.0], [595.0, 30.0], [597.0, 294.85714285714283], [599.0, 265.7142857142858], [585.0, 257.5], [613.0, 155.0], [609.0, 194.17391304347825], [623.0, 30.8], [621.0, 220.1818181818182], [619.0, 372.85714285714283], [611.0, 167.4], [615.0, 73.25], [633.0, 159.6], [635.0, 121.64285714285715], [637.0, 88.90909090909092], [639.0, 147.53846153846155], [625.0, 165.6], [627.0, 229.56249999999997], [629.0, 344.5833333333333], [631.0, 267.53846153846155], [617.0, 212.88888888888889], [643.0, 214.07142857142856], [655.0, 151.0], [653.0, 192.66666666666669], [651.0, 157.71428571428567], [641.0, 266.3333333333333], [645.0, 127.1875], [647.0, 98.71874999999999], [671.0, 283.77777777777777], [669.0, 304.6923076923077], [667.0, 228.0714285714285], [665.0, 71.875], [657.0, 193.7222222222222], [659.0, 96.45945945945945], [661.0, 251.58333333333334], [663.0, 69.99999999999999], [649.0, 223.87500000000003], [675.0, 112.72727272727272], [687.0, 133.69696969696963], [685.0, 193.43749999999997], [683.0, 294.25], [673.0, 123.50000000000001], [677.0, 197.3], [679.0, 103.89655172413796], [703.0, 151.2380952380952], [701.0, 150.25], [699.0, 152.1071428571429], [697.0, 95.32258064516127], [689.0, 186.00000000000006], [691.0, 72.15384615384616], [693.0, 113.5], [695.0, 123.92307692307692], [681.0, 295.875], [707.0, 122.06060606060606], [719.0, 209.75000000000003], [717.0, 148.8], [715.0, 198.875], [705.0, 168.8095238095238], [709.0, 259.0], [711.0, 132.8181818181818], [735.0, 249.45454545454544], [733.0, 94.82608695652175], [731.0, 195.18181818181813], [729.0, 144.75], [721.0, 163.2941176470588], [723.0, 65.46153846153847], [725.0, 89.9375], [727.0, 86.6046511627907], [713.0, 260.8], [739.0, 225.3125], [751.0, 166.45454545454547], [749.0, 218.7], [747.0, 141.7777777777778], [737.0, 125.56666666666663], [741.0, 229.0909090909091], [743.0, 81.4], [767.0, 123.2], [765.0, 119.47058823529412], [763.0, 228.47619047619048], [761.0, 234.16666666666666], [753.0, 239.0], [755.0, 152.625], [757.0, 197.27272727272725], [759.0, 200.89655172413788], [745.0, 118.33333333333334], [771.0, 74.38095238095237], [783.0, 131.93750000000003], [781.0, 151.95652173913047], [779.0, 88.29411764705883], [769.0, 119.57142857142857], [773.0, 157.625], [775.0, 97.05000000000001], [799.0, 141.53846153846155], [797.0, 127.05555555555557], [795.0, 108.78947368421053], [793.0, 113.0], [785.0, 145.74999999999997], [787.0, 216.55555555555557], [789.0, 116.75000000000001], [791.0, 102.31818181818184], [777.0, 157.4], [827.0, 203.93333333333328], [811.0, 119.83333333333333], [807.0, 255.99999999999997], [825.0, 137.62499999999997], [829.0, 210.08333333333331], [831.0, 166.47619047619045], [817.0, 241.5], [819.0, 219.53333333333336], [821.0, 262.6666666666667], [823.0, 171.5], [809.0, 69.63461538461539], [813.0, 97.55999999999999], [815.0, 138.81249999999997], [805.0, 50.583333333333336], [803.0, 48.8], [801.0, 48.6], [835.0, 282.1], [847.0, 211.7777777777778], [845.0, 269.3636363636364], [843.0, 297.125], [833.0, 163.58333333333337], [837.0, 201.0769230769231], [839.0, 155.27777777777771], [863.0, 100.5], [861.0, 273.5714285714286], [859.0, 110.38636363636368], [857.0, 57.27777777777778], [849.0, 291.8], [851.0, 270.8], [853.0, 205.54545454545453], [855.0, 243.80000000000004], [841.0, 194.83333333333331], [871.0, 296.7857142857143], [867.0, 58.529411764705884], [865.0, 47.125], [879.0, 254.50000000000006], [877.0, 191.13636363636363], [869.0, 143.25], [895.0, 115.82352941176472], [893.0, 287.8571428571429], [891.0, 214.0], [889.0, 136.11428571428567], [881.0, 132.38461538461542], [883.0, 283.0], [885.0, 152.4210526315789], [887.0, 176.43750000000003], [873.0, 145.63636363636363], [875.0, 272.08333333333337], [899.0, 158.79999999999998], [911.0, 234.85714285714286], [909.0, 147.99999999999997], [907.0, 287.6666666666667], [897.0, 228.64285714285717], [901.0, 219.55555555555557], [903.0, 217.95652173913038], [927.0, 266.0], [925.0, 175.44], [923.0, 224.41176470588235], [921.0, 333.66666666666663], [913.0, 180.99999999999997], [915.0, 166.22222222222223], [917.0, 233.58333333333337], [919.0, 213.29999999999998], [905.0, 85.80000000000001], [931.0, 401.5], [943.0, 156.42307692307688], [941.0, 95.15151515151514], [939.0, 240.64285714285717], [929.0, 109.05000000000003], [933.0, 175.71875], [935.0, 250.14285714285717], [959.0, 144.79166666666666], [957.0, 112.69047619047622], [955.0, 128.03571428571428], [953.0, 257.0], [945.0, 188.1818181818182], [947.0, 125.04761904761904], [949.0, 153.58333333333334], [951.0, 106.45714285714287], [937.0, 196.037037037037], [963.0, 114.79166666666667], [975.0, 173.72222222222223], [973.0, 64.1875], [971.0, 221.07142857142858], [961.0, 148.8333333333333], [965.0, 146.42105263157893], [967.0, 173.2857142857143], [991.0, 146.20833333333337], [989.0, 215.20000000000005], [987.0, 74.83928571428571], [985.0, 133.85714285714286], [977.0, 195.23529411764707], [979.0, 200.0], [981.0, 238.42857142857142], [983.0, 88.27777777777777], [969.0, 184.0], [995.0, 135.40000000000003], [1007.0, 143.67741935483872], [1005.0, 189.6], [1003.0, 195.09523809523813], [993.0, 232.5], [997.0, 170.0625], [999.0, 166.7058823529412], [1023.0, 247.55555555555554], [1021.0, 109.64285714285714], [1019.0, 118.36666666666667], [1017.0, 232.58333333333334], [1009.0, 210.9047619047619], [1011.0, 215.90909090909093], [1013.0, 126.2], [1015.0, 147.71428571428572], [1001.0, 156.6], [1030.0, 196.4705882352941], [1026.0, 221.63636363636365], [1054.0, 117.17948717948718], [1050.0, 185.0], [1046.0, 147.79999999999998], [1042.0, 90.68627450980392], [1034.0, 220.99999999999997], [1038.0, 47.142857142857146], [1074.0, 160.44827586206893], [1078.0, 108.86206896551727], [1082.0, 118.8235294117647], [1086.0, 152.17777777777778], [1058.0, 87.20833333333333], [1062.0, 148.16666666666669], [1066.0, 123.69444444444444], [1070.0, 127.13953488372096], [1094.0, 211.3157894736842], [1090.0, 268.90000000000003], [1118.0, 134.24390243902445], [1114.0, 117.6444444444444], [1110.0, 105.82716049382714], [1106.0, 81.08333333333333], [1098.0, 166.91176470588232], [1102.0, 126.98484848484846], [1150.0, 197.13043478260866], [1146.0, 198.75000000000003], [1142.0, 247.2857142857143], [1138.0, 125.87096774193549], [1122.0, 160.26315789473685], [1126.0, 130.72], [1130.0, 129.2142857142857], [1134.0, 114.0], [1158.0, 126.97674418604652], [1154.0, 265.7647058823529], [1182.0, 114.1666666666667], [1178.0, 81.32432432432432], [1174.0, 158.9090909090909], [1170.0, 245.5], [1162.0, 114.92592592592594], [1166.0, 220.4], [1214.0, 181.59999999999997], [1210.0, 120.58333333333333], [1206.0, 107.18918918918921], [1202.0, 174.71428571428572], [1186.0, 126.36170212765956], [1190.0, 172.17391304347828], [1194.0, 162.76470588235293], [1198.0, 232.84615384615387], [1222.0, 162.0384615384615], [1218.0, 143.36111111111111], [1246.0, 325.55555555555554], [1242.0, 276.06666666666666], [1238.0, 254.09090909090915], [1234.0, 134.5862068965517], [1226.0, 150.6111111111111], [1230.0, 249.72222222222223], [1274.0, 78.0], [1270.0, 79.33333333333333], [1278.0, 256.42857142857156], [1266.0, 171.91999999999996], [1250.0, 87.91304347826087], [1254.0, 202.17857142857144], [1258.0, 148.61111111111111], [1262.0, 337.9166666666667], [1286.0, 351.0833333333333], [1310.0, 312.0], [1306.0, 213.82608695652175], [1302.0, 272.82142857142856], [1282.0, 222.89999999999998], [1290.0, 221.52380952380952], [1294.0, 194.35714285714286], [1342.0, 312.0], [1338.0, 187.23913043478262], [1334.0, 273.4137931034483], [1330.0, 304.18750000000006], [1314.0, 174.33783783783787], [1318.0, 305.16], [1322.0, 168.35135135135138], [1326.0, 213.8125], [1298.0, 155.0], [1350.0, 101.75], [1346.0, 181.71428571428572], [1374.0, 214.55172413793105], [1370.0, 177.02439024390245], [1366.0, 151.6486486486487], [1354.0, 176.99999999999994], [1358.0, 288.35714285714283], [1394.0, 182.96969696969697], [1398.0, 308.9285714285715], [1402.0, 106.84615384615385], [1406.0, 265.6785714285714], [1378.0, 260.2], [1382.0, 220.24999999999997], [1386.0, 177.2285714285714], [1390.0, 290.1428571428572], [1362.0, 236.55], [1414.0, 258.54999999999995], [1438.0, 180.88461538461542], [1434.0, 258.3157894736842], [1430.0, 183.35483870967747], [1410.0, 172.75], [1418.0, 252.26666666666665], [1422.0, 179.25000000000003], [1470.0, 275.2333333333334], [1466.0, 132.85365853658539], [1462.0, 136.25714285714284], [1458.0, 146.10000000000002], [1442.0, 225.41463414634143], [1446.0, 172.0526315789474], [1450.0, 205.66666666666666], [1454.0, 218.1136363636365], [1426.0, 188.60000000000002], [1482.0, 87.19047619047619], [1486.0, 164.5609756097561], [1474.0, 265.9200000000001], [1502.0, 163.69230769230774], [1498.0, 137.23076923076923], [1478.0, 107.95000000000002], [1534.0, 306.15000000000003], [1530.0, 264.6], [1526.0, 307.8571428571429], [1522.0, 292.6153846153846], [1506.0, 276.3888888888889], [1510.0, 225.92592592592592], [1514.0, 188.22222222222223], [1518.0, 297.2631578947368], [1490.0, 190.20833333333334], [1494.0, 166.53703703703704], [1542.0, 118.61111111111113], [1566.0, 211.2580645161291], [1562.0, 188.09090909090907], [1558.0, 335.8666666666667], [1538.0, 324.25000000000006], [1546.0, 201.99999999999994], [1550.0, 184.17073170731706], [1598.0, 196.48275862068974], [1594.0, 331.8181818181818], [1590.0, 281.47058823529414], [1586.0, 283.88235294117646], [1570.0, 277.2631578947369], [1574.0, 157.9047619047619], [1578.0, 228.83333333333331], [1582.0, 244.79166666666666], [1554.0, 321.3478260869565], [1606.0, 285.3571428571429], [1630.0, 233.90909090909093], [1626.0, 272.83333333333337], [1622.0, 253.2307692307692], [1602.0, 324.90909090909093], [1610.0, 287.6], [1614.0, 301.13333333333327], [1662.0, 271.48275862068976], [1658.0, 224.11111111111111], [1654.0, 167.23255813953486], [1650.0, 190.21428571428572], [1634.0, 287.4230769230769], [1638.0, 234.92000000000002], [1642.0, 197.96551724137936], [1646.0, 244.2500000000001], [1618.0, 261.3513513513513], [1678.0, 294.3333333333333], [1670.0, 338.2857142857143], [1694.0, 323.43999999999994], [1690.0, 290.0740740740741], [1666.0, 238.59999999999994], [1674.0, 207.6666666666666], [1726.0, 258.80000000000007], [1722.0, 314.5909090909091], [1718.0, 292.1428571428571], [1714.0, 279.18918918918916], [1698.0, 282.08333333333337], [1702.0, 303.16666666666663], [1706.0, 322.47368421052624], [1710.0, 267.41666666666674], [1682.0, 102.0], [1686.0, 277.3333333333333], [1734.0, 206.49999999999991], [1758.0, 189.93548387096774], [1754.0, 136.41666666666669], [1750.0, 214.93749999999997], [1730.0, 272.95454545454544], [1738.0, 257.19047619047615], [1742.0, 182.96363636363637], [1790.0, 172.64], [1786.0, 168.99999999999997], [1782.0, 212.27272727272728], [1778.0, 213.00000000000006], [1762.0, 171.75000000000003], [1766.0, 174.23333333333338], [1770.0, 181.41666666666663], [1774.0, 243.53571428571428], [1746.0, 236.95454545454547], [1798.0, 180.89999999999995], [1822.0, 248.17391304347828], [1818.0, 141.66666666666663], [1814.0, 247.76190476190473], [1794.0, 172.40384615384616], [1802.0, 114.47727272727273], [1806.0, 241.05], [1826.0, 57.81818181818182], [1854.0, 159.95999999999998], [1850.0, 262.79999999999995], [1846.0, 228.0370370370371], [1842.0, 233.4137931034483], [1830.0, 205.14285714285717], [1834.0, 241.57575757575762], [1838.0, 165.17241379310354], [1810.0, 156.375], [1862.0, 279.91666666666674], [1858.0, 204.52941176470594], [1886.0, 270.5], [1882.0, 205.0952380952381], [1878.0, 222.66666666666666], [1866.0, 291.9090909090909], [1870.0, 108.75], [1906.0, 142.3777777777777], [1910.0, 194.4074074074074], [1914.0, 172.67857142857142], [1918.0, 251.84375000000009], [1890.0, 175.4545454545455], [1894.0, 217.84615384615387], [1898.0, 196.8571428571428], [1902.0, 249.56250000000006], [1874.0, 45.75], [1926.0, 271.4117647058823], [1950.0, 132.28333333333333], [1946.0, 202.55555555555563], [1942.0, 162.6666666666666], [1922.0, 96.25641025641025], [1930.0, 241.29629629629616], [1934.0, 206.9375], [1982.0, 201.0096618357488], [1978.0, 215.69230769230765], [1974.0, 235.6875], [1970.0, 202.72413793103442], [1954.0, 201.73684210526318], [1958.0, 209.30769230769226], [1962.0, 160.37499999999997], [1966.0, 218.7222222222222], [1938.0, 198.84210526315792], [1990.0, 102.65470852017937], [1986.0, 125.81818181818181], [1994.0, 127.49367088607595], [1998.0, 93.90834097158566], [1031.0, 198.0], [1027.0, 167.84375], [1047.0, 178.16666666666666], [1055.0, 160.3928571428571], [1051.0, 97.90322580645164], [1043.0, 190.6923076923077], [1035.0, 188.68421052631578], [1039.0, 156.70588235294116], [1075.0, 197.43749999999997], [1079.0, 193.27272727272728], [1083.0, 97.82352941176471], [1087.0, 157.13157894736844], [1059.0, 151.4], [1063.0, 127.3137254901961], [1067.0, 92.82222222222222], [1071.0, 163.26086956521735], [1095.0, 172.74999999999994], [1099.0, 120.0], [1091.0, 261.6666666666667], [1119.0, 103.05084745762713], [1115.0, 208.58333333333334], [1111.0, 142.6052631578947], [1107.0, 258.88235294117646], [1103.0, 151.46153846153848], [1151.0, 173.68181818181822], [1147.0, 126.91999999999996], [1143.0, 184.24137931034483], [1139.0, 141.16666666666666], [1123.0, 164.00000000000003], [1127.0, 174.9523809523809], [1131.0, 79.65384615384612], [1135.0, 215.57894736842104], [1159.0, 178.08333333333331], [1163.0, 143.02777777777777], [1155.0, 118.18000000000002], [1183.0, 265.0], [1179.0, 148.89473684210526], [1175.0, 172.28571428571428], [1171.0, 111.72222222222224], [1167.0, 207.55555555555554], [1215.0, 140.40740740740745], [1211.0, 151.44444444444443], [1207.0, 157.0434782608696], [1203.0, 193.31578947368422], [1187.0, 268.3846153846154], [1191.0, 159.5], [1195.0, 236.23076923076923], [1199.0, 218.625], [1223.0, 123.65306122448979], [1219.0, 318.5384615384615], [1247.0, 215.57894736842107], [1243.0, 99.41666666666666], [1239.0, 195.95000000000002], [1235.0, 290.33333333333337], [1227.0, 178.1111111111111], [1231.0, 292.2857142857143], [1267.0, 118.06666666666663], [1279.0, 250.5714285714286], [1275.0, 137.78571428571428], [1271.0, 81.21739130434783], [1251.0, 128.7857142857143], [1255.0, 225.04761904761912], [1259.0, 321.1818181818182], [1263.0, 214.76666666666662], [1287.0, 205.72222222222223], [1311.0, 309.5625], [1307.0, 252.57142857142853], [1303.0, 133.525641025641], [1283.0, 185.95454545454547], [1291.0, 172.34375], [1295.0, 303.9333333333334], [1343.0, 182.3181818181818], [1339.0, 234.99999999999994], [1335.0, 265.0625], [1331.0, 306.1333333333333], [1315.0, 273.46153846153845], [1319.0, 301.1785714285714], [1323.0, 146.72727272727275], [1327.0, 258.1851851851852], [1299.0, 386.0], [1351.0, 215.1176470588235], [1375.0, 341.8888888888889], [1371.0, 287.3703703703704], [1367.0, 336.0], [1347.0, 308.81249999999994], [1355.0, 237.0], [1359.0, 322.15789473684214], [1407.0, 186.1590909090909], [1403.0, 198.81578947368428], [1399.0, 195.5], [1395.0, 263.83333333333337], [1379.0, 197.67741935483872], [1383.0, 196.0606060606061], [1387.0, 215.53125000000003], [1391.0, 235.19230769230776], [1363.0, 226.70588235294122], [1415.0, 231.3666666666666], [1439.0, 181.1162790697674], [1435.0, 227.88], [1431.0, 195.24137931034483], [1411.0, 204.66666666666669], [1419.0, 173.37500000000003], [1423.0, 253.61111111111111], [1471.0, 281.8461538461538], [1467.0, 247.35294117647058], [1463.0, 186.2058823529412], [1459.0, 205.2962962962963], [1443.0, 133.32258064516128], [1447.0, 221.93103448275863], [1451.0, 194.8918918918919], [1455.0, 222.91304347826085], [1427.0, 265.59999999999997], [1479.0, 155.66666666666666], [1475.0, 258.3333333333334], [1503.0, 269.59999999999997], [1499.0, 101.59375], [1495.0, 287.1818181818182], [1483.0, 289.3333333333333], [1487.0, 274.11111111111114], [1523.0, 196.07999999999998], [1527.0, 194.6], [1531.0, 240.7777777777778], [1535.0, 186.6666666666667], [1507.0, 171.27272727272728], [1511.0, 151.58823529411768], [1515.0, 210.47058823529412], [1519.0, 190.86956521739128], [1491.0, 241.9047619047618], [1543.0, 267.9166666666667], [1567.0, 216.40625000000003], [1563.0, 177.77777777777774], [1559.0, 319.42857142857144], [1539.0, 187.56000000000003], [1547.0, 123.2075471698113], [1551.0, 235.66666666666663], [1599.0, 151.82142857142858], [1595.0, 258.74999999999994], [1591.0, 313.0869565217391], [1587.0, 265.8235294117647], [1571.0, 201.95999999999998], [1575.0, 346.1428571428571], [1579.0, 201.8518518518518], [1583.0, 214.49999999999997], [1555.0, 258.69565217391306], [1607.0, 291.5714285714285], [1631.0, 220.58823529411762], [1627.0, 154.85454545454547], [1623.0, 216.69230769230762], [1603.0, 278.375], [1611.0, 297.30000000000007], [1615.0, 253.06818181818178], [1663.0, 338.625], [1659.0, 250.71428571428578], [1655.0, 237.54545454545456], [1651.0, 212.04166666666674], [1635.0, 211.85294117647058], [1639.0, 192.22222222222223], [1643.0, 289.0625], [1647.0, 284.05263157894734], [1619.0, 355.49999999999994], [1671.0, 253.8235294117647], [1695.0, 301.5999999999999], [1691.0, 253.44], [1687.0, 261.09090909090907], [1667.0, 313.0], [1675.0, 280.3793103448276], [1679.0, 239.19444444444443], [1727.0, 199.18749999999997], [1723.0, 322.9166666666667], [1719.0, 268.4516129032258], [1715.0, 210.12121212121207], [1699.0, 220.48648648648654], [1703.0, 271.1052631578948], [1707.0, 234.82352941176472], [1711.0, 236.16666666666666], [1735.0, 212.2093023255815], [1759.0, 263.0], [1755.0, 234.8235294117647], [1751.0, 171.5294117647059], [1731.0, 151.0689655172414], [1739.0, 108.62499999999999], [1743.0, 228.30769230769226], [1791.0, 96.14285714285714], [1787.0, 182.14285714285714], [1783.0, 204.16666666666669], [1779.0, 153.50793650793648], [1763.0, 251.9090909090909], [1767.0, 255.0975609756098], [1771.0, 158.15000000000006], [1775.0, 185.1], [1747.0, 235.23333333333335], [1799.0, 221.94736842105263], [1823.0, 162.96551724137933], [1819.0, 163.1578947368421], [1815.0, 244.05882352941177], [1795.0, 163.719298245614], [1803.0, 231.57894736842104], [1807.0, 155.22857142857143], [1827.0, 57.6], [1855.0, 178.58333333333331], [1851.0, 209.84615384615387], [1847.0, 276.09090909090907], [1843.0, 198.59090909090904], [1831.0, 218.9333333333333], [1835.0, 203.1304347826087], [1839.0, 234.1111111111111], [1811.0, 156.12903225806454], [1863.0, 207.8695652173913], [1887.0, 229.31250000000003], [1883.0, 215.46153846153848], [1879.0, 248.56603773584914], [1859.0, 221.04000000000002], [1867.0, 189.0], [1871.0, 290.9142857142858], [1919.0, 257.7], [1915.0, 255.87878787878788], [1911.0, 249.3333333333333], [1907.0, 200.45454545454544], [1891.0, 231.81249999999997], [1895.0, 233.4838709677419], [1899.0, 165.125], [1903.0, 268.36666666666656], [1875.0, 287.06250000000006], [1927.0, 148.99999999999994], [1951.0, 201.89189189189187], [1947.0, 242.39024390243898], [1943.0, 142.8695652173913], [1923.0, 138.26666666666668], [1931.0, 235.00000000000003], [1935.0, 256.29032258064524], [1983.0, 184.27272727272728], [1979.0, 269.2307692307692], [1975.0, 199.21212121212125], [1971.0, 237.00000000000003], [1955.0, 188.58536585365852], [1959.0, 151.18918918918916], [1963.0, 14.125], [1967.0, 231.15151515151527], [1939.0, 227.18918918918916], [1987.0, 156.06593406593402], [1991.0, 114.62857142857148], [1995.0, 147.06716417910448], [1999.0, 102.68404907975452], [1.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1974.701842000074, 114.76855800000325]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1885395.1666666667, "minX": 1.58548716E12, "maxY": 2528217.5833333335, "series": [{"data": [[1.58548722E12, 2528217.5833333335], [1.58548716E12, 2466309.7666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58548722E12, 1931271.5], [1.58548716E12, 1885395.1666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58548722E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 101.45141202743262, "minX": 1.58548716E12, "maxY": 128.40974311220845, "series": [{"data": [[1.58548722E12, 101.45141202743262], [1.58548716E12, 128.40974311220845]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58548722E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 101.44203869488929, "minX": 1.58548716E12, "maxY": 128.3883115042798, "series": [{"data": [[1.58548722E12, 101.44203869488929], [1.58548716E12, 128.3883115042798]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58548722E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.056745914112368456, "minX": 1.58548716E12, "maxY": 0.09027713111601568, "series": [{"data": [[1.58548722E12, 0.056745914112368456], [1.58548716E12, 0.09027713111601568]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58548722E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.58548716E12, "maxY": 1336.0, "series": [{"data": [[1.58548722E12, 255.0], [1.58548716E12, 1336.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58548722E12, 2.0], [1.58548716E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58548722E12, 112.0], [1.58548716E12, 117.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58548722E12, 237.0], [1.58548716E12, 124.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58548722E12, 195.0], [1.58548716E12, 120.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58548722E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 565.0, "maxY": 422.0, "series": [{"data": [[565.0, 10.0], [681.0, 422.0], [19053.0, 103.0], [19259.0, 101.0], [19065.0, 105.0], [19149.0, 102.0], [18893.0, 106.0], [19367.0, 102.0], [19355.0, 103.0], [19337.0, 104.0], [19243.0, 103.0], [19907.0, 99.0], [19501.0, 102.0], [19829.0, 102.0], [20095.0, 98.0], [19695.0, 101.0], [19613.0, 98.0], [19897.0, 100.0], [19725.0, 100.0], [19765.0, 103.0], [19923.0, 100.0], [19471.0, 103.0], [2750.0, 264.0], [3756.0, 250.0], [4166.0, 329.5], [6107.0, 284.0], [7573.0, 268.0], [7843.0, 249.0], [8434.0, 232.0], [8574.0, 224.0], [8489.0, 237.0], [10398.0, 193.0], [11429.0, 182.0], [12935.0, 156.0], [13141.0, 149.0], [18222.0, 105.0], [17790.0, 66.0], [19382.0, 101.0], [19404.0, 103.0], [19196.0, 103.0], [19424.0, 101.0], [19150.0, 104.0], [19058.0, 101.0], [19234.0, 102.0], [18870.0, 105.0], [19360.0, 104.0], [19362.0, 103.0], [19280.0, 103.0], [19350.0, 103.0], [19538.0, 101.0], [19660.0, 100.0], [19846.0, 101.0], [19874.0, 103.0], [19848.0, 103.0], [19718.0, 100.0], [20004.0, 100.0], [19636.0, 101.0], [19546.0, 102.0], [19470.0, 100.0], [19458.0, 103.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20095.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 565.0, "maxY": 421.0, "series": [{"data": [[565.0, 10.0], [681.0, 421.0], [19053.0, 103.0], [19259.0, 101.0], [19065.0, 105.0], [19149.0, 102.0], [18893.0, 106.0], [19367.0, 102.0], [19355.0, 103.0], [19337.0, 104.0], [19243.0, 103.0], [19907.0, 99.0], [19501.0, 102.0], [19829.0, 102.0], [20095.0, 98.0], [19695.0, 101.0], [19613.0, 98.0], [19897.0, 100.0], [19725.0, 100.0], [19765.0, 103.0], [19923.0, 100.0], [19471.0, 103.0], [2750.0, 264.0], [3756.0, 250.0], [4166.0, 329.0], [6107.0, 284.0], [7573.0, 268.0], [7843.0, 249.0], [8434.0, 232.0], [8574.0, 224.0], [8489.0, 237.0], [10398.0, 193.0], [11429.0, 182.0], [12935.0, 156.0], [13141.0, 149.0], [18222.0, 105.0], [17790.0, 66.0], [19382.0, 101.0], [19404.0, 103.0], [19196.0, 103.0], [19424.0, 101.0], [19150.0, 104.0], [19058.0, 101.0], [19234.0, 102.0], [18870.0, 105.0], [19360.0, 104.0], [19362.0, 103.0], [19280.0, 103.0], [19350.0, 103.0], [19538.0, 101.0], [19660.0, 100.0], [19846.0, 101.0], [19874.0, 103.0], [19848.0, 103.0], [19718.0, 100.0], [20004.0, 100.0], [19636.0, 101.0], [19546.0, 102.0], [19470.0, 100.0], [19458.0, 103.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20095.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8266.5, "minX": 1.58548716E12, "maxY": 8400.166666666666, "series": [{"data": [[1.58548722E12, 8400.166666666666], [1.58548716E12, 8266.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58548722E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8233.166666666666, "minX": 1.58548716E12, "maxY": 8433.5, "series": [{"data": [[1.58548722E12, 8433.5], [1.58548716E12, 8233.166666666666]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58548722E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8233.166666666666, "minX": 1.58548716E12, "maxY": 8433.5, "series": [{"data": [[1.58548722E12, 8433.5], [1.58548716E12, 8233.166666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58548722E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8233.166666666666, "minX": 1.58548716E12, "maxY": 8433.5, "series": [{"data": [[1.58548722E12, 8433.5], [1.58548716E12, 8233.166666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58548722E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

