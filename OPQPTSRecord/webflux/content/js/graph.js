/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 976.0, "series": [{"data": [[0.0, 2.0], [0.1, 68.0], [0.2, 91.0], [0.3, 108.0], [0.4, 135.0], [0.5, 158.0], [0.6, 168.0], [0.7, 176.0], [0.8, 183.0], [0.9, 188.0], [1.0, 203.0], [1.1, 208.0], [1.2, 214.0], [1.3, 216.0], [1.4, 217.0], [1.5, 218.0], [1.6, 219.0], [1.7, 219.0], [1.8, 219.0], [1.9, 220.0], [2.0, 220.0], [2.1, 220.0], [2.2, 220.0], [2.3, 221.0], [2.4, 221.0], [2.5, 221.0], [2.6, 221.0], [2.7, 221.0], [2.8, 222.0], [2.9, 222.0], [3.0, 222.0], [3.1, 222.0], [3.2, 222.0], [3.3, 222.0], [3.4, 223.0], [3.5, 223.0], [3.6, 223.0], [3.7, 223.0], [3.8, 223.0], [3.9, 223.0], [4.0, 223.0], [4.1, 223.0], [4.2, 224.0], [4.3, 224.0], [4.4, 224.0], [4.5, 224.0], [4.6, 224.0], [4.7, 224.0], [4.8, 224.0], [4.9, 224.0], [5.0, 224.0], [5.1, 225.0], [5.2, 225.0], [5.3, 225.0], [5.4, 225.0], [5.5, 225.0], [5.6, 225.0], [5.7, 225.0], [5.8, 225.0], [5.9, 225.0], [6.0, 225.0], [6.1, 226.0], [6.2, 226.0], [6.3, 226.0], [6.4, 226.0], [6.5, 226.0], [6.6, 226.0], [6.7, 226.0], [6.8, 226.0], [6.9, 226.0], [7.0, 226.0], [7.1, 226.0], [7.2, 226.0], [7.3, 226.0], [7.4, 226.0], [7.5, 227.0], [7.6, 227.0], [7.7, 227.0], [7.8, 227.0], [7.9, 227.0], [8.0, 227.0], [8.1, 227.0], [8.2, 227.0], [8.3, 227.0], [8.4, 227.0], [8.5, 227.0], [8.6, 227.0], [8.7, 227.0], [8.8, 227.0], [8.9, 227.0], [9.0, 228.0], [9.1, 228.0], [9.2, 228.0], [9.3, 228.0], [9.4, 228.0], [9.5, 228.0], [9.6, 228.0], [9.7, 228.0], [9.8, 228.0], [9.9, 228.0], [10.0, 228.0], [10.1, 228.0], [10.2, 228.0], [10.3, 228.0], [10.4, 228.0], [10.5, 228.0], [10.6, 228.0], [10.7, 228.0], [10.8, 228.0], [10.9, 229.0], [11.0, 229.0], [11.1, 229.0], [11.2, 229.0], [11.3, 229.0], [11.4, 229.0], [11.5, 229.0], [11.6, 229.0], [11.7, 229.0], [11.8, 229.0], [11.9, 229.0], [12.0, 229.0], [12.1, 229.0], [12.2, 229.0], [12.3, 229.0], [12.4, 229.0], [12.5, 229.0], [12.6, 229.0], [12.7, 229.0], [12.8, 229.0], [12.9, 229.0], [13.0, 229.0], [13.1, 229.0], [13.2, 230.0], [13.3, 230.0], [13.4, 230.0], [13.5, 230.0], [13.6, 230.0], [13.7, 230.0], [13.8, 230.0], [13.9, 230.0], [14.0, 230.0], [14.1, 230.0], [14.2, 230.0], [14.3, 230.0], [14.4, 230.0], [14.5, 230.0], [14.6, 230.0], [14.7, 230.0], [14.8, 230.0], [14.9, 230.0], [15.0, 230.0], [15.1, 230.0], [15.2, 230.0], [15.3, 230.0], [15.4, 230.0], [15.5, 230.0], [15.6, 231.0], [15.7, 231.0], [15.8, 231.0], [15.9, 231.0], [16.0, 231.0], [16.1, 231.0], [16.2, 231.0], [16.3, 231.0], [16.4, 231.0], [16.5, 231.0], [16.6, 231.0], [16.7, 231.0], [16.8, 231.0], [16.9, 231.0], [17.0, 231.0], [17.1, 231.0], [17.2, 231.0], [17.3, 231.0], [17.4, 231.0], [17.5, 231.0], [17.6, 231.0], [17.7, 231.0], [17.8, 231.0], [17.9, 231.0], [18.0, 232.0], [18.1, 232.0], [18.2, 232.0], [18.3, 232.0], [18.4, 232.0], [18.5, 232.0], [18.6, 232.0], [18.7, 232.0], [18.8, 232.0], [18.9, 232.0], [19.0, 232.0], [19.1, 232.0], [19.2, 232.0], [19.3, 232.0], [19.4, 232.0], [19.5, 232.0], [19.6, 232.0], [19.7, 232.0], [19.8, 232.0], [19.9, 232.0], [20.0, 232.0], [20.1, 232.0], [20.2, 232.0], [20.3, 232.0], [20.4, 233.0], [20.5, 233.0], [20.6, 233.0], [20.7, 233.0], [20.8, 233.0], [20.9, 233.0], [21.0, 233.0], [21.1, 233.0], [21.2, 233.0], [21.3, 233.0], [21.4, 233.0], [21.5, 233.0], [21.6, 233.0], [21.7, 233.0], [21.8, 233.0], [21.9, 233.0], [22.0, 233.0], [22.1, 233.0], [22.2, 233.0], [22.3, 233.0], [22.4, 233.0], [22.5, 233.0], [22.6, 233.0], [22.7, 233.0], [22.8, 233.0], [22.9, 233.0], [23.0, 233.0], [23.1, 234.0], [23.2, 234.0], [23.3, 234.0], [23.4, 234.0], [23.5, 234.0], [23.6, 234.0], [23.7, 234.0], [23.8, 234.0], [23.9, 234.0], [24.0, 234.0], [24.1, 234.0], [24.2, 234.0], [24.3, 234.0], [24.4, 234.0], [24.5, 234.0], [24.6, 234.0], [24.7, 234.0], [24.8, 234.0], [24.9, 234.0], [25.0, 234.0], [25.1, 234.0], [25.2, 234.0], [25.3, 234.0], [25.4, 234.0], [25.5, 234.0], [25.6, 234.0], [25.7, 234.0], [25.8, 234.0], [25.9, 234.0], [26.0, 234.0], [26.1, 235.0], [26.2, 235.0], [26.3, 235.0], [26.4, 235.0], [26.5, 235.0], [26.6, 235.0], [26.7, 235.0], [26.8, 235.0], [26.9, 235.0], [27.0, 235.0], [27.1, 235.0], [27.2, 235.0], [27.3, 235.0], [27.4, 235.0], [27.5, 235.0], [27.6, 235.0], [27.7, 235.0], [27.8, 235.0], [27.9, 235.0], [28.0, 235.0], [28.1, 235.0], [28.2, 235.0], [28.3, 235.0], [28.4, 235.0], [28.5, 235.0], [28.6, 235.0], [28.7, 235.0], [28.8, 235.0], [28.9, 235.0], [29.0, 235.0], [29.1, 236.0], [29.2, 236.0], [29.3, 236.0], [29.4, 236.0], [29.5, 236.0], [29.6, 236.0], [29.7, 236.0], [29.8, 236.0], [29.9, 236.0], [30.0, 236.0], [30.1, 236.0], [30.2, 236.0], [30.3, 236.0], [30.4, 236.0], [30.5, 236.0], [30.6, 236.0], [30.7, 236.0], [30.8, 236.0], [30.9, 236.0], [31.0, 236.0], [31.1, 236.0], [31.2, 236.0], [31.3, 236.0], [31.4, 236.0], [31.5, 236.0], [31.6, 236.0], [31.7, 236.0], [31.8, 236.0], [31.9, 236.0], [32.0, 236.0], [32.1, 236.0], [32.2, 237.0], [32.3, 237.0], [32.4, 237.0], [32.5, 237.0], [32.6, 237.0], [32.7, 237.0], [32.8, 237.0], [32.9, 237.0], [33.0, 237.0], [33.1, 237.0], [33.2, 237.0], [33.3, 237.0], [33.4, 237.0], [33.5, 237.0], [33.6, 237.0], [33.7, 237.0], [33.8, 237.0], [33.9, 237.0], [34.0, 237.0], [34.1, 237.0], [34.2, 237.0], [34.3, 237.0], [34.4, 237.0], [34.5, 237.0], [34.6, 237.0], [34.7, 237.0], [34.8, 237.0], [34.9, 237.0], [35.0, 237.0], [35.1, 237.0], [35.2, 237.0], [35.3, 237.0], [35.4, 237.0], [35.5, 237.0], [35.6, 237.0], [35.7, 238.0], [35.8, 238.0], [35.9, 238.0], [36.0, 238.0], [36.1, 238.0], [36.2, 238.0], [36.3, 238.0], [36.4, 238.0], [36.5, 238.0], [36.6, 238.0], [36.7, 238.0], [36.8, 238.0], [36.9, 238.0], [37.0, 238.0], [37.1, 238.0], [37.2, 238.0], [37.3, 238.0], [37.4, 238.0], [37.5, 238.0], [37.6, 238.0], [37.7, 238.0], [37.8, 238.0], [37.9, 238.0], [38.0, 238.0], [38.1, 238.0], [38.2, 238.0], [38.3, 238.0], [38.4, 238.0], [38.5, 238.0], [38.6, 238.0], [38.7, 238.0], [38.8, 238.0], [38.9, 238.0], [39.0, 238.0], [39.1, 238.0], [39.2, 238.0], [39.3, 238.0], [39.4, 239.0], [39.5, 239.0], [39.6, 239.0], [39.7, 239.0], [39.8, 239.0], [39.9, 239.0], [40.0, 239.0], [40.1, 239.0], [40.2, 239.0], [40.3, 239.0], [40.4, 239.0], [40.5, 239.0], [40.6, 239.0], [40.7, 239.0], [40.8, 239.0], [40.9, 239.0], [41.0, 239.0], [41.1, 239.0], [41.2, 239.0], [41.3, 239.0], [41.4, 239.0], [41.5, 239.0], [41.6, 239.0], [41.7, 239.0], [41.8, 239.0], [41.9, 239.0], [42.0, 239.0], [42.1, 239.0], [42.2, 239.0], [42.3, 239.0], [42.4, 239.0], [42.5, 239.0], [42.6, 239.0], [42.7, 239.0], [42.8, 240.0], [42.9, 240.0], [43.0, 240.0], [43.1, 240.0], [43.2, 240.0], [43.3, 240.0], [43.4, 240.0], [43.5, 240.0], [43.6, 240.0], [43.7, 240.0], [43.8, 240.0], [43.9, 240.0], [44.0, 240.0], [44.1, 240.0], [44.2, 240.0], [44.3, 240.0], [44.4, 240.0], [44.5, 240.0], [44.6, 240.0], [44.7, 240.0], [44.8, 240.0], [44.9, 240.0], [45.0, 240.0], [45.1, 240.0], [45.2, 240.0], [45.3, 240.0], [45.4, 240.0], [45.5, 240.0], [45.6, 240.0], [45.7, 240.0], [45.8, 240.0], [45.9, 240.0], [46.0, 241.0], [46.1, 241.0], [46.2, 241.0], [46.3, 241.0], [46.4, 241.0], [46.5, 241.0], [46.6, 241.0], [46.7, 241.0], [46.8, 241.0], [46.9, 241.0], [47.0, 241.0], [47.1, 241.0], [47.2, 241.0], [47.3, 241.0], [47.4, 241.0], [47.5, 241.0], [47.6, 241.0], [47.7, 241.0], [47.8, 241.0], [47.9, 241.0], [48.0, 241.0], [48.1, 241.0], [48.2, 241.0], [48.3, 241.0], [48.4, 241.0], [48.5, 241.0], [48.6, 241.0], [48.7, 241.0], [48.8, 241.0], [48.9, 241.0], [49.0, 242.0], [49.1, 242.0], [49.2, 242.0], [49.3, 242.0], [49.4, 242.0], [49.5, 242.0], [49.6, 242.0], [49.7, 242.0], [49.8, 242.0], [49.9, 242.0], [50.0, 242.0], [50.1, 242.0], [50.2, 242.0], [50.3, 242.0], [50.4, 242.0], [50.5, 242.0], [50.6, 242.0], [50.7, 242.0], [50.8, 242.0], [50.9, 242.0], [51.0, 242.0], [51.1, 242.0], [51.2, 242.0], [51.3, 242.0], [51.4, 242.0], [51.5, 242.0], [51.6, 242.0], [51.7, 243.0], [51.8, 243.0], [51.9, 243.0], [52.0, 243.0], [52.1, 243.0], [52.2, 243.0], [52.3, 243.0], [52.4, 243.0], [52.5, 243.0], [52.6, 243.0], [52.7, 243.0], [52.8, 243.0], [52.9, 243.0], [53.0, 243.0], [53.1, 243.0], [53.2, 243.0], [53.3, 243.0], [53.4, 243.0], [53.5, 243.0], [53.6, 243.0], [53.7, 243.0], [53.8, 243.0], [53.9, 243.0], [54.0, 243.0], [54.1, 243.0], [54.2, 243.0], [54.3, 243.0], [54.4, 243.0], [54.5, 243.0], [54.6, 243.0], [54.7, 244.0], [54.8, 244.0], [54.9, 244.0], [55.0, 244.0], [55.1, 244.0], [55.2, 244.0], [55.3, 244.0], [55.4, 244.0], [55.5, 244.0], [55.6, 244.0], [55.7, 244.0], [55.8, 244.0], [55.9, 244.0], [56.0, 244.0], [56.1, 244.0], [56.2, 244.0], [56.3, 244.0], [56.4, 244.0], [56.5, 244.0], [56.6, 244.0], [56.7, 244.0], [56.8, 244.0], [56.9, 244.0], [57.0, 244.0], [57.1, 244.0], [57.2, 244.0], [57.3, 244.0], [57.4, 244.0], [57.5, 245.0], [57.6, 245.0], [57.7, 245.0], [57.8, 245.0], [57.9, 245.0], [58.0, 245.0], [58.1, 245.0], [58.2, 245.0], [58.3, 245.0], [58.4, 245.0], [58.5, 245.0], [58.6, 245.0], [58.7, 245.0], [58.8, 245.0], [58.9, 245.0], [59.0, 245.0], [59.1, 245.0], [59.2, 245.0], [59.3, 245.0], [59.4, 245.0], [59.5, 245.0], [59.6, 245.0], [59.7, 245.0], [59.8, 245.0], [59.9, 245.0], [60.0, 245.0], [60.1, 245.0], [60.2, 245.0], [60.3, 246.0], [60.4, 246.0], [60.5, 246.0], [60.6, 246.0], [60.7, 246.0], [60.8, 246.0], [60.9, 246.0], [61.0, 246.0], [61.1, 246.0], [61.2, 246.0], [61.3, 246.0], [61.4, 246.0], [61.5, 246.0], [61.6, 246.0], [61.7, 246.0], [61.8, 246.0], [61.9, 246.0], [62.0, 246.0], [62.1, 246.0], [62.2, 246.0], [62.3, 246.0], [62.4, 247.0], [62.5, 247.0], [62.6, 247.0], [62.7, 247.0], [62.8, 247.0], [62.9, 247.0], [63.0, 247.0], [63.1, 247.0], [63.2, 247.0], [63.3, 247.0], [63.4, 247.0], [63.5, 247.0], [63.6, 247.0], [63.7, 247.0], [63.8, 247.0], [63.9, 247.0], [64.0, 247.0], [64.1, 247.0], [64.2, 247.0], [64.3, 248.0], [64.4, 248.0], [64.5, 248.0], [64.6, 248.0], [64.7, 248.0], [64.8, 248.0], [64.9, 248.0], [65.0, 248.0], [65.1, 248.0], [65.2, 248.0], [65.3, 248.0], [65.4, 248.0], [65.5, 248.0], [65.6, 248.0], [65.7, 248.0], [65.8, 248.0], [65.9, 249.0], [66.0, 249.0], [66.1, 249.0], [66.2, 249.0], [66.3, 249.0], [66.4, 249.0], [66.5, 249.0], [66.6, 249.0], [66.7, 249.0], [66.8, 249.0], [66.9, 249.0], [67.0, 249.0], [67.1, 249.0], [67.2, 249.0], [67.3, 249.0], [67.4, 250.0], [67.5, 250.0], [67.6, 250.0], [67.7, 250.0], [67.8, 250.0], [67.9, 250.0], [68.0, 250.0], [68.1, 250.0], [68.2, 250.0], [68.3, 250.0], [68.4, 250.0], [68.5, 250.0], [68.6, 250.0], [68.7, 250.0], [68.8, 250.0], [68.9, 251.0], [69.0, 251.0], [69.1, 251.0], [69.2, 251.0], [69.3, 251.0], [69.4, 251.0], [69.5, 251.0], [69.6, 251.0], [69.7, 251.0], [69.8, 251.0], [69.9, 251.0], [70.0, 251.0], [70.1, 251.0], [70.2, 251.0], [70.3, 251.0], [70.4, 251.0], [70.5, 251.0], [70.6, 252.0], [70.7, 252.0], [70.8, 252.0], [70.9, 252.0], [71.0, 252.0], [71.1, 252.0], [71.2, 252.0], [71.3, 252.0], [71.4, 252.0], [71.5, 252.0], [71.6, 252.0], [71.7, 252.0], [71.8, 252.0], [71.9, 252.0], [72.0, 252.0], [72.1, 252.0], [72.2, 253.0], [72.3, 253.0], [72.4, 253.0], [72.5, 253.0], [72.6, 253.0], [72.7, 253.0], [72.8, 253.0], [72.9, 253.0], [73.0, 253.0], [73.1, 253.0], [73.2, 253.0], [73.3, 253.0], [73.4, 253.0], [73.5, 253.0], [73.6, 253.0], [73.7, 254.0], [73.8, 254.0], [73.9, 254.0], [74.0, 254.0], [74.1, 254.0], [74.2, 254.0], [74.3, 254.0], [74.4, 254.0], [74.5, 254.0], [74.6, 254.0], [74.7, 254.0], [74.8, 254.0], [74.9, 254.0], [75.0, 254.0], [75.1, 255.0], [75.2, 255.0], [75.3, 255.0], [75.4, 255.0], [75.5, 255.0], [75.6, 255.0], [75.7, 255.0], [75.8, 255.0], [75.9, 255.0], [76.0, 255.0], [76.1, 255.0], [76.2, 255.0], [76.3, 255.0], [76.4, 256.0], [76.5, 256.0], [76.6, 256.0], [76.7, 256.0], [76.8, 256.0], [76.9, 256.0], [77.0, 256.0], [77.1, 256.0], [77.2, 256.0], [77.3, 256.0], [77.4, 256.0], [77.5, 256.0], [77.6, 257.0], [77.7, 257.0], [77.8, 257.0], [77.9, 257.0], [78.0, 257.0], [78.1, 257.0], [78.2, 257.0], [78.3, 257.0], [78.4, 257.0], [78.5, 257.0], [78.6, 257.0], [78.7, 257.0], [78.8, 258.0], [78.9, 258.0], [79.0, 258.0], [79.1, 258.0], [79.2, 258.0], [79.3, 258.0], [79.4, 258.0], [79.5, 258.0], [79.6, 258.0], [79.7, 258.0], [79.8, 259.0], [79.9, 259.0], [80.0, 259.0], [80.1, 259.0], [80.2, 259.0], [80.3, 259.0], [80.4, 259.0], [80.5, 259.0], [80.6, 259.0], [80.7, 259.0], [80.8, 260.0], [80.9, 260.0], [81.0, 260.0], [81.1, 260.0], [81.2, 260.0], [81.3, 260.0], [81.4, 260.0], [81.5, 261.0], [81.6, 261.0], [81.7, 261.0], [81.8, 261.0], [81.9, 261.0], [82.0, 261.0], [82.1, 262.0], [82.2, 262.0], [82.3, 262.0], [82.4, 262.0], [82.5, 262.0], [82.6, 262.0], [82.7, 262.0], [82.8, 263.0], [82.9, 263.0], [83.0, 263.0], [83.1, 263.0], [83.2, 264.0], [83.3, 264.0], [83.4, 264.0], [83.5, 264.0], [83.6, 265.0], [83.7, 265.0], [83.8, 265.0], [83.9, 265.0], [84.0, 265.0], [84.1, 265.0], [84.2, 266.0], [84.3, 266.0], [84.4, 266.0], [84.5, 266.0], [84.6, 266.0], [84.7, 266.0], [84.8, 266.0], [84.9, 267.0], [85.0, 267.0], [85.1, 267.0], [85.2, 267.0], [85.3, 267.0], [85.4, 267.0], [85.5, 267.0], [85.6, 268.0], [85.7, 268.0], [85.8, 268.0], [85.9, 268.0], [86.0, 268.0], [86.1, 268.0], [86.2, 269.0], [86.3, 269.0], [86.4, 269.0], [86.5, 269.0], [86.6, 269.0], [86.7, 269.0], [86.8, 270.0], [86.9, 270.0], [87.0, 270.0], [87.1, 270.0], [87.2, 271.0], [87.3, 271.0], [87.4, 272.0], [87.5, 272.0], [87.6, 273.0], [87.7, 273.0], [87.8, 274.0], [87.9, 274.0], [88.0, 275.0], [88.1, 276.0], [88.2, 276.0], [88.3, 277.0], [88.4, 277.0], [88.5, 278.0], [88.6, 279.0], [88.7, 280.0], [88.8, 281.0], [88.9, 283.0], [89.0, 285.0], [89.1, 286.0], [89.2, 287.0], [89.3, 289.0], [89.4, 290.0], [89.5, 291.0], [89.6, 292.0], [89.7, 293.0], [89.8, 294.0], [89.9, 296.0], [90.0, 297.0], [90.1, 298.0], [90.2, 298.0], [90.3, 299.0], [90.4, 300.0], [90.5, 300.0], [90.6, 301.0], [90.7, 302.0], [90.8, 302.0], [90.9, 303.0], [91.0, 304.0], [91.1, 304.0], [91.2, 306.0], [91.3, 306.0], [91.4, 307.0], [91.5, 308.0], [91.6, 309.0], [91.7, 310.0], [91.8, 311.0], [91.9, 312.0], [92.0, 313.0], [92.1, 313.0], [92.2, 314.0], [92.3, 315.0], [92.4, 316.0], [92.5, 316.0], [92.6, 317.0], [92.7, 318.0], [92.8, 319.0], [92.9, 320.0], [93.0, 321.0], [93.1, 322.0], [93.2, 324.0], [93.3, 327.0], [93.4, 329.0], [93.5, 332.0], [93.6, 334.0], [93.7, 340.0], [93.8, 342.0], [93.9, 344.0], [94.0, 346.0], [94.1, 348.0], [94.2, 351.0], [94.3, 353.0], [94.4, 355.0], [94.5, 357.0], [94.6, 358.0], [94.7, 360.0], [94.8, 361.0], [94.9, 362.0], [95.0, 363.0], [95.1, 364.0], [95.2, 365.0], [95.3, 366.0], [95.4, 367.0], [95.5, 368.0], [95.6, 369.0], [95.7, 369.0], [95.8, 370.0], [95.9, 371.0], [96.0, 372.0], [96.1, 373.0], [96.2, 374.0], [96.3, 375.0], [96.4, 376.0], [96.5, 377.0], [96.6, 378.0], [96.7, 379.0], [96.8, 380.0], [96.9, 381.0], [97.0, 382.0], [97.1, 384.0], [97.2, 386.0], [97.3, 388.0], [97.4, 390.0], [97.5, 392.0], [97.6, 394.0], [97.7, 398.0], [97.8, 403.0], [97.9, 406.0], [98.0, 417.0], [98.1, 430.0], [98.2, 439.0], [98.3, 447.0], [98.4, 453.0], [98.5, 459.0], [98.6, 465.0], [98.7, 471.0], [98.8, 481.0], [98.9, 492.0], [99.0, 505.0], [99.1, 513.0], [99.2, 524.0], [99.3, 537.0], [99.4, 543.0], [99.5, 549.0], [99.6, 555.0], [99.7, 562.0], [99.8, 577.0], [99.9, 612.0], [100.0, 976.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "maxY": 893824.0, "series": [{"data": [[0.0, 2136.0], [600.0, 1103.0], [300.0, 73661.0], [700.0, 49.0], [800.0, 59.0], [400.0, 12360.0], [200.0, 893824.0], [100.0, 7626.0], [900.0, 56.0], [500.0, 9126.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10321.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 989679.0, "series": [{"data": [[0.0, 989679.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10321.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1901.968420006809, "minX": 1.58549064E12, "maxY": 2000.0, "series": [{"data": [[1.5854907E12, 2000.0], [1.58549064E12, 1901.968420006809], [1.58549076E12, 1979.8157189752962]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58549076E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 896.5, "series": [{"data": [[2.0, 2.0], [3.0, 2.0], [5.0, 7.0], [10.0, 7.0], [12.0, 7.0], [13.0, 7.0], [14.0, 6.0], [15.0, 6.0], [16.0, 8.0], [17.0, 8.0], [20.0, 8.0], [21.0, 8.0], [24.0, 8.0], [25.0, 8.0], [28.0, 8.0], [29.0, 8.0], [30.0, 9.0], [31.0, 8.0], [35.0, 8.0], [37.0, 8.0], [39.0, 10.0], [41.0, 10.4], [43.0, 11.0], [46.0, 9.333333333333334], [50.0, 9.0], [53.0, 13.0], [52.0, 9.0], [54.0, 13.0], [57.0, 17.0], [59.0, 17.0], [58.0, 17.333333333333332], [63.0, 17.0], [62.0, 16.0], [66.0, 20.5], [65.0, 18.8], [71.0, 23.0], [69.0, 22.4], [68.0, 23.0], [74.0, 22.375], [79.0, 22.0], [78.0, 21.333333333333332], [77.0, 21.0], [76.0, 21.0], [83.0, 22.0], [81.0, 22.0], [80.0, 22.0], [86.0, 23.0], [85.0, 22.666666666666668], [84.0, 22.0], [91.0, 26.0], [90.0, 24.75], [89.0, 23.0], [95.0, 27.0], [94.0, 27.0], [93.0, 27.0], [99.0, 27.0], [98.0, 27.0], [97.0, 27.0], [96.0, 27.0], [102.0, 26.0], [101.0, 27.5], [107.0, 26.0], [106.0, 26.0], [104.0, 26.0], [111.0, 27.0], [109.0, 26.0], [115.0, 27.0], [113.0, 26.75], [119.0, 27.0], [117.0, 27.0], [122.0, 27.0], [121.0, 26.333333333333332], [127.0, 28.75], [126.0, 27.0], [125.0, 27.0], [124.0, 26.0], [135.0, 32.0], [134.0, 34.0], [133.0, 34.75], [132.0, 34.0], [131.0, 34.0], [130.0, 34.0], [128.0, 34.0], [142.0, 34.5], [140.0, 31.0], [138.0, 31.0], [150.0, 39.0], [149.0, 39.0], [147.0, 39.333333333333336], [144.0, 37.333333333333336], [159.0, 35.0], [155.0, 40.0], [154.0, 39.333333333333336], [152.0, 39.5], [166.0, 35.0], [165.0, 35.0], [163.0, 35.25], [160.0, 35.0], [175.0, 35.0], [174.0, 35.0], [173.0, 35.0], [172.0, 35.0], [170.0, 36.0], [169.0, 36.0], [183.0, 36.0], [181.0, 36.0], [180.0, 35.0], [179.0, 35.333333333333336], [178.0, 35.0], [177.0, 35.0], [191.0, 35.666666666666664], [189.0, 36.0], [188.0, 36.0], [186.0, 36.0], [185.0, 36.0], [199.0, 36.0], [198.0, 36.0], [197.0, 36.0], [196.0, 36.0], [195.0, 36.0], [194.0, 36.0], [193.0, 36.0], [192.0, 36.0], [206.0, 36.0], [202.0, 36.0], [201.0, 36.0], [215.0, 36.0], [214.0, 36.0], [213.0, 36.0], [212.0, 37.0], [209.0, 37.0], [223.0, 42.0], [222.0, 42.0], [219.0, 42.0], [217.0, 39.0], [216.0, 36.0], [230.0, 39.0], [229.0, 42.75], [228.0, 43.0], [227.0, 43.0], [226.0, 42.5], [224.0, 42.5], [239.0, 39.0], [238.0, 40.0], [236.0, 40.0], [233.0, 39.333333333333336], [232.0, 39.5], [247.0, 40.0], [246.0, 40.0], [245.0, 40.0], [244.0, 40.0], [243.0, 40.0], [242.0, 39.5], [241.0, 40.0], [240.0, 39.0], [253.0, 45.5], [252.0, 41.666666666666664], [251.0, 45.0], [249.0, 39.0], [248.0, 40.333333333333336], [258.0, 46.75], [271.0, 42.0], [270.0, 43.0], [257.0, 47.09090909090909], [256.0, 46.2], [267.0, 42.25], [265.0, 42.333333333333336], [264.0, 45.0], [263.0, 43.5], [262.0, 44.0], [261.0, 47.5], [260.0, 47.333333333333336], [274.0, 43.0], [286.0, 44.333333333333336], [287.0, 43.0], [285.0, 43.0], [283.0, 43.333333333333336], [281.0, 43.44444444444444], [278.0, 42.5], [277.0, 43.25], [276.0, 43.5], [273.0, 42.8], [272.0, 43.0], [302.0, 51.2], [303.0, 49.0], [301.0, 55.0], [291.0, 44.0], [289.0, 43.0], [288.0, 43.14285714285714], [299.0, 44.0], [298.0, 44.0], [297.0, 43.333333333333336], [296.0, 44.0], [294.0, 44.0], [293.0, 44.0], [292.0, 43.5], [318.0, 49.0], [315.0, 49.0], [313.0, 49.0], [312.0, 49.0], [310.0, 49.142857142857146], [309.0, 49.0], [307.0, 48.666666666666664], [306.0, 49.0], [305.0, 48.333333333333336], [334.0, 408.2222222222223], [333.0, 607.5000000000001], [335.0, 55.0], [332.0, 54.5], [331.0, 54.2], [330.0, 54.0], [329.0, 53.5], [328.0, 55.5], [327.0, 56.0], [322.0, 49.5], [320.0, 49.0], [350.0, 54.888888888888886], [336.0, 636.3636363636364], [343.0, 54.0], [341.0, 54.0], [340.0, 54.0], [337.0, 289.25], [351.0, 55.37499999999999], [349.0, 55.0], [347.0, 55.0], [346.0, 55.0], [345.0, 55.0], [344.0, 54.0], [366.0, 56.0], [358.0, 747.0], [359.0, 194.2], [367.0, 56.0], [365.0, 56.333333333333336], [354.0, 55.75], [353.0, 56.0], [363.0, 57.0], [362.0, 56.0], [360.0, 55.37499999999999], [356.0, 55.0], [370.0, 57.0], [381.0, 60.0], [376.0, 57.111111111111114], [374.0, 57.0], [373.0, 56.0], [372.0, 56.4], [371.0, 57.0], [369.0, 56.83333333333333], [368.0, 56.5], [397.0, 885.6666666666666], [396.0, 164.875], [387.0, 61.0], [386.0, 60.5], [398.0, 427.81818181818176], [399.0, 635.4615384615386], [394.0, 63.0], [393.0, 60.0], [392.0, 60.0], [391.0, 61.0], [390.0, 60.0], [388.0, 59.57142857142857], [401.0, 476.56250000000006], [400.0, 729.2], [402.0, 194.24], [403.0, 850.0], [404.0, 571.9230769230768], [405.0, 896.5], [406.0, 320.07692307692304], [407.0, 526.5555555555557], [408.0, 780.7142857142858], [414.0, 392.3333333333333], [415.0, 787.3333333333334], [412.0, 861.9], [413.0, 152.24999999999997], [409.0, 386.4], [410.0, 494.0], [411.0, 490.94117647058823], [417.0, 365.25], [416.0, 420.7499999999999], [418.0, 308.4117647058824], [419.0, 677.4444444444443], [420.0, 167.33333333333331], [421.0, 394.30000000000007], [422.0, 444.00000000000006], [423.0, 579.5714285714286], [424.0, 511.50000000000006], [430.0, 281.7142857142858], [431.0, 322.61538461538464], [428.0, 495.0], [429.0, 601.4399999999999], [425.0, 767.5], [426.0, 652.4000000000001], [427.0, 663.8], [446.0, 76.0], [433.0, 328.125], [432.0, 318.2307692307693], [439.0, 87.2], [438.0, 87.0], [434.0, 325.0], [436.0, 208.62499999999997], [437.0, 228.8571428571429], [447.0, 76.11111111111113], [440.0, 87.0], [444.0, 82.93750000000001], [435.0, 87.0], [442.0, 88.0], [441.0, 88.0], [461.0, 180.25], [454.0, 377.99999999999994], [453.0, 76.14285714285715], [452.0, 76.0], [455.0, 257.52941176470586], [456.0, 469.40000000000003], [457.0, 427.7272727272727], [458.0, 403.57142857142856], [459.0, 371.4444444444445], [460.0, 322.0], [451.0, 76.72727272727272], [448.0, 76.0], [463.0, 71.33333333333333], [462.0, 72.0], [478.0, 73.25], [479.0, 73.18181818181819], [477.0, 73.0], [476.0, 72.8], [475.0, 73.0], [473.0, 72.6], [472.0, 72.33333333333333], [470.0, 73.22222222222223], [467.0, 72.2], [465.0, 72.0], [464.0, 71.6], [468.0, 72.5], [494.0, 74.08333333333334], [495.0, 73.33333333333333], [492.0, 74.0], [482.0, 73.75], [481.0, 74.0], [480.0, 73.33333333333333], [491.0, 73.25], [490.0, 73.0], [489.0, 73.75], [488.0, 74.08333333333334], [487.0, 73.33333333333334], [486.0, 73.0], [485.0, 73.0], [484.0, 73.0], [509.0, 284.7692307692307], [506.0, 297.8], [507.0, 438.77777777777777], [508.0, 420.7777777777777], [499.0, 74.0], [497.0, 74.0], [510.0, 532.6], [511.0, 457.49999999999994], [504.0, 74.5], [503.0, 74.75], [502.0, 74.0], [501.0, 74.0], [500.0, 74.0], [514.0, 367.54545454545445], [512.0, 529.75], [526.0, 439.0], [524.0, 353.0], [522.0, 433.2857142857143], [516.0, 307.0], [518.0, 369.75], [528.0, 165.0], [530.0, 67.0], [532.0, 67.0], [534.0, 68.0], [542.0, 67.8], [540.0, 68.5], [520.0, 447.6666666666667], [572.0, 449.25], [550.0, 343.28571428571433], [568.0, 453.00000000000006], [570.0, 416.375], [574.0, 389.8333333333333], [560.0, 345.7], [562.0, 285.0714285714286], [564.0, 385.90000000000003], [566.0, 225.22222222222226], [552.0, 253.73333333333332], [554.0, 265.40000000000003], [556.0, 291.4347826086957], [558.0, 428.00000000000006], [548.0, 69.0], [544.0, 68.0], [582.0, 112.77777777777777], [600.0, 423.29999999999995], [576.0, 233.00000000000003], [590.0, 102.0], [588.0, 102.0], [586.0, 102.0], [578.0, 338.0], [598.0, 315.11764705882354], [602.0, 282.2], [604.0, 263.6666666666667], [596.0, 102.0], [594.0, 102.0], [592.0, 102.0], [606.0, 89.72727272727273], [614.0, 89.57142857142857], [636.0, 92.0], [610.0, 90.5], [622.0, 90.90909090909092], [618.0, 89.16666666666667], [616.0, 90.0], [612.0, 422.1], [626.0, 91.0], [628.0, 91.8], [630.0, 92.0], [638.0, 92.0], [654.0, 379.2], [648.0, 334.78571428571433], [650.0, 244.909090909091], [652.0, 417.26666666666665], [656.0, 538.8], [670.0, 407.22222222222223], [668.0, 376.8947368421052], [666.0, 353.73333333333335], [664.0, 270.83333333333337], [646.0, 86.0], [644.0, 86.0], [642.0, 92.33333333333333], [640.0, 93.0], [658.0, 246.39999999999998], [660.0, 348.2], [662.0, 460.2307692307692], [676.0, 88.0], [698.0, 398.45], [674.0, 87.5], [684.0, 88.22222222222223], [682.0, 88.5], [680.0, 88.0], [690.0, 500.22222222222223], [692.0, 246.15384615384613], [694.0, 347.38461538461536], [696.0, 408.0769230769231], [700.0, 402.1666666666667], [702.0, 373.75], [688.0, 89.5], [706.0, 382.25], [704.0, 385.0], [718.0, 91.0], [716.0, 90.2], [712.0, 90.57142857142857], [708.0, 395.1818181818182], [730.0, 204.2], [728.0, 91.0], [710.0, 90.8], [732.0, 385.3076923076924], [734.0, 408.2352941176471], [726.0, 91.0], [724.0, 91.0], [722.0, 90.0], [720.0, 91.875], [738.0, 374.77777777777777], [762.0, 311.5], [736.0, 321.4166666666667], [740.0, 306.0], [742.0, 194.42857142857144], [760.0, 115.5], [744.0, 376.6666666666667], [746.0, 115.0], [748.0, 115.16666666666667], [750.0, 115.3], [764.0, 196.64285714285714], [766.0, 368.46666666666664], [752.0, 115.0], [754.0, 115.2], [756.0, 115.0], [758.0, 115.5], [770.0, 348.5], [768.0, 370.7692307692307], [782.0, 108.45454545454545], [780.0, 275.74999999999994], [778.0, 314.3846153846154], [772.0, 339.0], [774.0, 393.8518518518519], [784.0, 314.75], [786.0, 108.5], [788.0, 108.5], [790.0, 110.04761904761905], [798.0, 108.5], [796.0, 108.16666666666667], [794.0, 108.5], [792.0, 108.33333333333333], [776.0, 332.31818181818176], [806.0, 358.16666666666663], [804.0, 390.3076923076923], [802.0, 109.0], [800.0, 108.1818181818182], [814.0, 413.57142857142856], [816.0, 233.61538461538464], [828.0, 107.0], [824.0, 107.0], [818.0, 214.44444444444446], [820.0, 108.0], [808.0, 334.1052631578947], [810.0, 287.5909090909091], [812.0, 368.57142857142856], [846.0, 387.4090909090909], [840.0, 398.18181818181824], [842.0, 337.2857142857143], [844.0, 294.30303030303025], [848.0, 394.05263157894734], [862.0, 108.00000000000001], [858.0, 107.0], [856.0, 453.0], [838.0, 107.28571428571429], [836.0, 107.5], [834.0, 108.0], [832.0, 107.37500000000001], [850.0, 415.54545454545456], [852.0, 343.1304347826087], [854.0, 442.3571428571429], [892.0, 417.14285714285717], [882.0, 377.21428571428567], [880.0, 108.0], [894.0, 361.5416666666667], [884.0, 318.7307692307692], [886.0, 322.45161290322585], [888.0, 440.49999999999994], [870.0, 109.0], [868.0, 107.5], [866.0, 108.25], [864.0, 107.53846153846153], [874.0, 108.5], [872.0, 108.6], [890.0, 430.11111111111103], [898.0, 411.4], [924.0, 420.87499999999994], [920.0, 379.2083333333333], [896.0, 412.5], [910.0, 126.0], [908.0, 126.0], [906.0, 126.5], [904.0, 126.22222222222223], [900.0, 174.21428571428572], [902.0, 153.76923076923075], [918.0, 337.608695652174], [922.0, 318.94736842105266], [926.0, 368.55172413793105], [912.0, 126.5], [914.0, 123.2], [916.0, 119.0], [930.0, 179.6538461538461], [928.0, 348.00000000000006], [942.0, 358.7297297297298], [940.0, 348.7407407407408], [938.0, 401.92592592592604], [932.0, 277.3076923076923], [934.0, 323.875], [944.0, 280.18181818181813], [958.0, 122.6], [954.0, 122.5], [952.0, 121.85714285714286], [946.0, 284.66666666666663], [948.0, 122.0], [950.0, 123.0], [936.0, 152.1111111111111], [986.0, 172.875], [990.0, 180.42857142857142], [982.0, 390.73684210526324], [976.0, 124.0], [980.0, 150.0], [988.0, 179.25], [984.0, 154.16666666666666], [962.0, 122.625], [964.0, 122.16666666666667], [966.0, 123.8], [974.0, 133.64705882352942], [972.0, 123.33333333333333], [970.0, 122.71428571428571], [968.0, 122.33333333333333], [992.0, 180.5], [1016.0, 457.742857142857], [1008.0, 478.3333333333333], [1004.0, 181.0], [1002.0, 180.0], [1006.0, 464.7647058823529], [994.0, 180.11111111111111], [996.0, 179.5], [998.0, 180.0], [1018.0, 414.3636363636363], [1020.0, 382.33333333333326], [1022.0, 346.88235294117646], [1010.0, 442.99999999999994], [1012.0, 386.77777777777777], [1014.0, 489.7419354838709], [1028.0, 182.0], [1076.0, 156.75], [1024.0, 279.70833333333337], [1032.0, 181.88888888888889], [1036.0, 182.0], [1072.0, 156.875], [1052.0, 328.28125000000006], [1044.0, 181.2], [1040.0, 182.0], [1080.0, 395.9117647058823], [1084.0, 323.75757575757575], [1056.0, 175.0], [1060.0, 175.25], [1064.0, 157.83333333333331], [1068.0, 156.8928571428571], [1092.0, 408.0222222222221], [1088.0, 469.87999999999994], [1116.0, 158.0], [1108.0, 384.7118644067797], [1104.0, 425.22222222222223], [1096.0, 242.0], [1136.0, 136.71428571428572], [1140.0, 137.0], [1144.0, 137.0], [1120.0, 159.23076923076923], [1148.0, 136.8], [1124.0, 476.4736842105262], [1128.0, 362.99999999999994], [1132.0, 159.4], [1164.0, 302.4166666666667], [1156.0, 432.7692307692308], [1172.0, 402.16129032258056], [1168.0, 421.8], [1180.0, 175.0], [1160.0, 401.61538461538464], [1200.0, 264.9285714285714], [1204.0, 378.57499999999993], [1184.0, 174.0], [1188.0, 174.0], [1192.0, 142.83333333333334], [1196.0, 143.5], [1212.0, 166.16666666666669], [1208.0, 165.6], [1220.0, 166.0], [1276.0, 166.5], [1232.0, 434.0], [1236.0, 321.9047619047618], [1264.0, 185.375], [1216.0, 165.75], [1224.0, 166.5], [1228.0, 167.0], [1244.0, 167.18181818181816], [1240.0, 166.33333333333334], [1272.0, 167.5], [1248.0, 385.6666666666667], [1252.0, 470.7142857142857], [1256.0, 441.94117647058823], [1260.0, 320.0370370370371], [1288.0, 171.125], [1336.0, 176.88888888888889], [1308.0, 511.5142857142858], [1304.0, 498.5526315789474], [1300.0, 175.16129032258067], [1296.0, 140.83333333333331], [1284.0, 168.37037037037035], [1328.0, 176.5], [1332.0, 177.0], [1340.0, 512.6], [1312.0, 175.0], [1316.0, 175.6], [1320.0, 175.8205128205128], [1324.0, 176.0], [1348.0, 459.4137931034485], [1356.0, 531.9753086419755], [1344.0, 523.5454545454546], [1360.0, 462.8636363636365], [1364.0, 184.0], [1368.0, 185.21428571428572], [1372.0, 186.5], [1352.0, 565.2222222222222], [1400.0, 260.6], [1404.0, 189.5], [1376.0, 186.5], [1380.0, 185.0], [1384.0, 187.15384615384616], [1388.0, 187.30769230769232], [1396.0, 542.6363636363636], [1392.0, 503.7037037037037], [1420.0, 190.25], [1468.0, 187.40000000000003], [1436.0, 568.232558139535], [1432.0, 408.4583333333333], [1428.0, 191.9], [1424.0, 191.53191489361703], [1408.0, 190.0], [1456.0, 212.0], [1460.0, 212.5], [1464.0, 212.8], [1440.0, 534.7317073170731], [1444.0, 351.98591549295764], [1448.0, 214.625], [1452.0, 482.5], [1476.0, 218.09090909090912], [1524.0, 488.84], [1496.0, 436.88461538461536], [1492.0, 220.0], [1488.0, 219.55555555555557], [1520.0, 210.0], [1472.0, 218.0], [1480.0, 218.83333333333331], [1500.0, 220.56250000000003], [1528.0, 545.4736842105264], [1532.0, 395.07407407407396], [1504.0, 221.18750000000003], [1508.0, 223.55555555555554], [1512.0, 200.0], [1516.0, 201.17241379310346], [1540.0, 507.59154929577437], [1536.0, 547.0], [1564.0, 208.5], [1556.0, 209.29999999999998], [1552.0, 208.2], [1544.0, 369.50000000000006], [1548.0, 370.6034482758621], [1584.0, 512.5], [1588.0, 208.8], [1592.0, 207.74999999999997], [1568.0, 207.83333333333331], [1572.0, 208.5], [1576.0, 208.66666666666666], [1596.0, 208.45454545454547], [1656.0, 151.08333333333334], [1600.0, 208.25], [1604.0, 208.70000000000002], [1612.0, 210.33333333333331], [1628.0, 305.41666666666663], [1624.0, 493.1904761904761], [1660.0, 550.6923076923077], [1652.0, 151.4545454545455], [1632.0, 454.70588235294116], [1636.0, 411.18518518518516], [1644.0, 203.5], [1640.0, 204.53846153846152], [1616.0, 534.0833333333335], [1620.0, 429.3333333333333], [1712.0, 393.50000000000006], [1664.0, 461.48275862068965], [1688.0, 103.0], [1684.0, 103.4], [1680.0, 104.0], [1696.0, 495.3571428571429], [1720.0, 75.0], [1716.0, 466.3055555555556], [1672.0, 104.0], [1668.0, 124.13157894736842], [1700.0, 506.6896551724139], [1704.0, 467.61764705882337], [1708.0, 329.7777777777777], [1776.0, 459.5423728813559], [1780.0, 185.66666666666669], [1740.0, 451.5416666666667], [1736.0, 73.07692307692308], [1732.0, 74.2], [1728.0, 74.25], [1784.0, 305.3103448275862], [1788.0, 422.1186440677966], [1760.0, 426.55], [1764.0, 423.0], [1768.0, 418.72727272727275], [1744.0, 518.0909090909091], [1748.0, 457.4], [1756.0, 436.5], [1752.0, 440.1], [1772.0, 457.6521739130436], [1804.0, 399.8181818181818], [1792.0, 453.7297297297297], [1796.0, 394.6818181818182], [1800.0, 402.0], [1844.0, 382.0], [1848.0, 380.0], [1852.0, 424.8666666666667], [1824.0, 270.6666666666667], [1808.0, 397.5714285714286], [1812.0, 396.3333333333333], [1816.0, 391.8333333333333], [1820.0, 341.1944444444445], [1828.0, 477.49999999999994], [1860.0, 437.2941176470588], [1856.0, 419.3589743589743], [1884.0, 343.4000000000001], [1880.0, 377.5428571428572], [1876.0, 393.0000000000001], [1872.0, 461.84210526315775], [1864.0, 451.37837837837833], [1868.0, 422.63636363636357], [1900.0, 162.05555555555554], [1896.0, 259.75], [1892.0, 262.23076923076917], [1916.0, 196.4], [1912.0, 198.0], [1908.0, 200.75], [1904.0, 140.33333333333334], [1928.0, 465.77272727272725], [1968.0, 513.3333333333334], [1948.0, 509.4545454545454], [1920.0, 191.33333333333334], [1924.0, 190.0], [1972.0, 164.75000000000003], [1980.0, 160.95], [1976.0, 163.0], [1952.0, 314.6896551724138], [1956.0, 379.5999999999999], [1960.0, 386.6428571428571], [1964.0, 480.3333333333333], [1944.0, 180.2], [1940.0, 182.1578947368421], [1936.0, 134.66666666666666], [1988.0, 489.75], [1992.0, 256.1076923076923], [1996.0, 357.5], [2000.0, 253.24125756590604], [1029.0, 181.5], [1025.0, 384.88000000000005], [1033.0, 182.0], [1037.0, 182.0], [1073.0, 157.08333333333334], [1077.0, 157.0], [1049.0, 179.99999999999997], [1045.0, 181.66666666666666], [1041.0, 182.14285714285714], [1053.0, 237.83333333333331], [1081.0, 403.0588235294117], [1085.0, 450.94736842105266], [1057.0, 174.5], [1061.0, 174.3684210526316], [1065.0, 156.71428571428567], [1069.0, 156.52941176470588], [1089.0, 444.9666666666665], [1109.0, 353.0], [1105.0, 243.0], [1117.0, 158.79999999999998], [1093.0, 184.61764705882356], [1097.0, 359.0], [1101.0, 157.57894736842104], [1137.0, 137.0], [1141.0, 139.24999999999997], [1145.0, 136.0], [1121.0, 159.0], [1149.0, 136.21428571428572], [1125.0, 506.2857142857143], [1129.0, 342.42857142857144], [1133.0, 160.0], [1157.0, 442.7142857142857], [1153.0, 447.75], [1177.0, 174.64705882352942], [1173.0, 373.2777777777777], [1169.0, 359.5000000000001], [1161.0, 352.1904761904762], [1165.0, 283.68181818181813], [1201.0, 418.3157894736841], [1205.0, 291.21875], [1209.0, 296.5], [1185.0, 174.43859649122808], [1189.0, 164.63157894736844], [1193.0, 143.0], [1197.0, 147.33333333333331], [1213.0, 166.0], [1221.0, 166.0], [1233.0, 314.04166666666663], [1237.0, 231.9491525423729], [1217.0, 166.0], [1225.0, 166.57142857142856], [1229.0, 168.0], [1245.0, 166.66666666666666], [1241.0, 166.10000000000002], [1265.0, 176.71875], [1249.0, 448.73333333333335], [1277.0, 167.5], [1273.0, 167.08333333333334], [1269.0, 167.12000000000003], [1253.0, 314.5454545454545], [1257.0, 416.74999999999994], [1261.0, 371.4117647058824], [1309.0, 423.2692307692308], [1301.0, 424.93749999999994], [1297.0, 134.5], [1305.0, 473.5000000000001], [1329.0, 175.0], [1293.0, 135.83333333333334], [1289.0, 171.0], [1285.0, 171.0909090909091], [1281.0, 166.87500000000003], [1333.0, 176.8181818181818], [1341.0, 520.263157894737], [1313.0, 175.66666666666666], [1317.0, 175.25], [1321.0, 176.0], [1345.0, 505.8], [1397.0, 535.2307692307693], [1373.0, 185.2], [1369.0, 185.72972972972968], [1365.0, 185.05000000000004], [1361.0, 184.57142857142858], [1349.0, 520.7333333333332], [1353.0, 447.7368421052632], [1357.0, 184.0], [1389.0, 187.88888888888889], [1385.0, 186.5], [1381.0, 186.0], [1377.0, 186.0], [1405.0, 190.0], [1401.0, 360.0571428571428], [1393.0, 613.2758620689655], [1413.0, 191.0], [1429.0, 348.8461538461537], [1433.0, 511.38709677419365], [1437.0, 324.6153846153847], [1457.0, 407.98214285714283], [1421.0, 191.06250000000003], [1417.0, 191.0], [1409.0, 190.33333333333337], [1461.0, 212.0], [1465.0, 212.625], [1469.0, 192.0], [1441.0, 314.2380952380952], [1445.0, 470.5000000000001], [1449.0, 430.80357142857144], [1453.0, 447.15151515151524], [1473.0, 218.0], [1529.0, 492.82000000000005], [1521.0, 390.5], [1493.0, 536.1176470588235], [1489.0, 220.25], [1497.0, 263.57142857142856], [1477.0, 218.76666666666668], [1481.0, 218.75], [1485.0, 219.26923076923077], [1501.0, 221.0], [1525.0, 421.025641025641], [1533.0, 519.391304347826], [1505.0, 221.6], [1509.0, 217.53333333333336], [1513.0, 200.0], [1517.0, 201.0], [1541.0, 444.41176470588243], [1537.0, 491.80882352941177], [1565.0, 208.66666666666669], [1561.0, 209.125], [1557.0, 208.33333333333334], [1553.0, 210.00000000000003], [1545.0, 426.5135135135135], [1573.0, 209.0], [1585.0, 528.0882352941175], [1589.0, 208.0], [1593.0, 208.21428571428575], [1597.0, 208.33333333333334], [1657.0, 150.66666666666666], [1613.0, 508.7333333333334], [1605.0, 208.4], [1601.0, 209.0], [1629.0, 505.088888888889], [1625.0, 548.0], [1661.0, 501.8529411764706], [1653.0, 152.0], [1649.0, 199.46153846153845], [1633.0, 516.9687499999999], [1637.0, 501.1521739130435], [1641.0, 227.6], [1645.0, 204.25], [1617.0, 318.75], [1621.0, 400.7500000000002], [1665.0, 397.568181818182], [1717.0, 211.25000000000006], [1693.0, 103.0], [1689.0, 103.33333333333333], [1685.0, 103.66666666666667], [1681.0, 103.35714285714288], [1721.0, 386.9230769230769], [1713.0, 447.4736842105264], [1673.0, 104.0], [1669.0, 105.0909090909091], [1697.0, 474.92307692307685], [1725.0, 74.8], [1701.0, 422.0000000000001], [1705.0, 248.14583333333334], [1709.0, 465.1836734693878], [1729.0, 74.33333333333333], [1777.0, 466.3157894736842], [1781.0, 462.7058823529412], [1785.0, 456.31707317073176], [1789.0, 383.0506329113924], [1745.0, 494.0487804878048], [1749.0, 447.00000000000006], [1753.0, 438.21428571428567], [1733.0, 73.42105263157895], [1737.0, 72.12500000000001], [1741.0, 450.375], [1769.0, 418.1428571428571], [1765.0, 422.0], [1761.0, 424.875], [1773.0, 467.2352941176471], [1805.0, 399.3333333333333], [1793.0, 400.99999999999994], [1797.0, 399.78378378378375], [1801.0, 401.47368421052636], [1845.0, 380.6923076923076], [1849.0, 379.5], [1853.0, 466.2413793103448], [1825.0, 263.1764705882353], [1809.0, 427.0], [1813.0, 296.1034482758621], [1817.0, 367.53333333333336], [1821.0, 151.83333333333334], [1829.0, 460.82142857142867], [1833.0, 384.4], [1857.0, 468.5609756097561], [1885.0, 342.22222222222223], [1881.0, 345.4545454545455], [1877.0, 365.43589743589735], [1873.0, 401.56410256410254], [1861.0, 468.2368421052631], [1865.0, 431.3968253968253], [1869.0, 463.4782608695652], [1901.0, 367.0], [1897.0, 259.4736842105263], [1917.0, 196.33333333333337], [1913.0, 198.16666666666666], [1933.0, 186.66666666666666], [1925.0, 188.8125], [1949.0, 438.4576271186439], [1929.0, 450.5], [1969.0, 167.33333333333334], [1973.0, 535.0], [1981.0, 160.25], [1977.0, 162.73076923076923], [1953.0, 458.3548387096773], [1957.0, 509.0], [1961.0, 525.4166666666666], [1965.0, 429.342105263158], [1945.0, 215.44444444444446], [1941.0, 182.4], [1937.0, 184.0], [1989.0, 291.2361111111111], [1993.0, 287.98], [1997.0, 266.9595959595959], [1985.0, 228.80645161290326], [515.0, 306.5], [527.0, 144.0], [525.0, 357.75], [523.0, 406.2], [513.0, 414.99999999999994], [517.0, 398.61538461538464], [519.0, 546.1249999999999], [529.0, 68.0], [531.0, 67.0], [533.0, 67.0], [535.0, 68.0], [543.0, 68.0], [539.0, 68.28571428571429], [521.0, 333.1], [571.0, 334.6499999999999], [555.0, 396.3333333333333], [551.0, 383.1111111111111], [569.0, 365.0], [573.0, 390.0], [575.0, 352.92857142857144], [561.0, 354.1], [563.0, 225.33333333333334], [565.0, 454.57142857142856], [567.0, 341.0], [553.0, 299.08333333333326], [557.0, 240.31250000000003], [559.0, 192.875], [549.0, 68.0], [545.0, 68.28571428571429], [577.0, 457.3333333333333], [589.0, 101.25], [587.0, 102.0], [585.0, 111.23076923076923], [579.0, 112.33333333333334], [583.0, 112.33333333333333], [597.0, 504.6666666666667], [599.0, 265.0833333333334], [601.0, 347.875], [603.0, 483.4], [607.0, 89.0], [593.0, 102.0], [613.0, 90.0], [611.0, 462.1111111111111], [609.0, 90.22222222222223], [619.0, 90.75], [617.0, 89.75], [615.0, 167.63636363636365], [639.0, 92.66666666666667], [625.0, 90.66666666666666], [627.0, 91.66666666666667], [629.0, 91.54545454545455], [631.0, 92.0], [637.0, 92.12500000000001], [635.0, 92.0], [633.0, 91.25], [655.0, 557.5714285714286], [651.0, 311.90909090909093], [649.0, 510.5714285714286], [653.0, 584.5000000000001], [671.0, 178.25], [669.0, 448.55555555555554], [667.0, 458.25], [645.0, 86.0], [643.0, 86.0], [641.0, 92.75], [665.0, 233.14999999999995], [657.0, 301.29166666666663], [659.0, 436.8333333333333], [661.0, 322.72727272727275], [663.0, 425.75], [675.0, 88.0], [691.0, 340.7777777777778], [673.0, 330.72727272727275], [679.0, 88.33333333333333], [677.0, 88.0], [687.0, 88.38461538461539], [685.0, 88.75], [683.0, 88.25], [681.0, 88.0], [689.0, 409.22222222222223], [693.0, 286.9444444444444], [695.0, 283.8], [697.0, 313.9000000000001], [699.0, 284.8571428571429], [701.0, 429.1428571428571], [703.0, 321.8636363636363], [707.0, 424.0], [731.0, 308.11764705882354], [719.0, 91.00000000000001], [717.0, 90.88888888888889], [715.0, 91.2], [705.0, 315.07407407407413], [709.0, 174.125], [729.0, 111.41666666666666], [711.0, 90.0], [733.0, 488.3636363636363], [735.0, 404.0833333333333], [727.0, 91.5], [723.0, 91.14285714285715], [721.0, 91.0], [739.0, 401.25000000000006], [737.0, 320.0], [741.0, 150.71428571428572], [743.0, 437.0], [761.0, 115.23076923076923], [745.0, 150.66666666666669], [747.0, 115.0], [749.0, 115.0], [763.0, 407.7647058823529], [765.0, 441.8571428571429], [767.0, 375.75], [753.0, 115.4], [755.0, 115.6], [757.0, 115.71428571428571], [759.0, 115.21428571428571], [771.0, 336.375], [775.0, 229.00000000000003], [783.0, 108.5], [781.0, 214.49999999999997], [779.0, 287.93939393939394], [769.0, 481.3333333333333], [773.0, 282.40000000000003], [785.0, 108.64285714285714], [787.0, 108.42857142857143], [791.0, 107.0], [799.0, 108.4], [797.0, 108.33333333333333], [795.0, 108.4], [793.0, 108.0], [777.0, 286.93333333333334], [807.0, 261.5], [805.0, 356.93750000000006], [811.0, 272.5], [803.0, 108.0], [801.0, 108.0], [815.0, 321.5], [831.0, 107.25], [829.0, 106.93333333333334], [827.0, 107.0], [825.0, 106.86956521739131], [817.0, 348.65000000000003], [819.0, 415.0], [823.0, 106.875], [821.0, 106.83333333333333], [809.0, 279.79999999999995], [813.0, 335.0769230769231], [847.0, 373.38888888888886], [843.0, 343.2105263157895], [841.0, 351.8235294117647], [845.0, 337.0], [863.0, 107.66666666666667], [861.0, 107.0], [859.0, 107.0], [839.0, 107.35714285714286], [837.0, 108.0], [835.0, 107.1], [833.0, 107.57142857142857], [857.0, 150.625], [849.0, 362.625], [851.0, 308.9411764705882], [853.0, 411.69999999999993], [855.0, 257.77777777777777], [893.0, 468.5], [891.0, 327.22580645161287], [883.0, 494.0769230769232], [881.0, 108.66666666666667], [895.0, 285.2857142857143], [885.0, 398.23529411764713], [887.0, 465.0], [871.0, 108.0], [869.0, 108.0], [867.0, 108.5], [865.0, 108.0], [879.0, 109.0], [877.0, 108.0], [875.0, 108.0], [889.0, 393.76470588235287], [897.0, 247.0], [911.0, 126.5], [909.0, 126.0], [907.0, 126.0], [905.0, 126.09090909090911], [899.0, 166.0], [901.0, 159.0], [919.0, 240.95652173913038], [921.0, 448.0], [923.0, 356.43750000000006], [925.0, 347.5], [927.0, 220.0588235294118], [913.0, 126.57142857142856], [915.0, 119.0], [931.0, 429.9090909090909], [943.0, 309.0], [941.0, 234.85714285714286], [939.0, 211.5], [929.0, 399.1764705882353], [933.0, 460.6666666666667], [935.0, 389.44117647058823], [959.0, 123.33333333333333], [957.0, 122.0], [955.0, 122.52631578947367], [947.0, 308.2413793103448], [949.0, 122.8], [951.0, 121.875], [937.0, 227.1153846153846], [977.0, 123.8], [981.0, 493.33333333333337], [983.0, 150.0], [991.0, 180.66666666666666], [979.0, 144.70833333333331], [989.0, 179.45454545454547], [987.0, 180.33333333333331], [985.0, 180.33333333333334], [975.0, 123.2], [961.0, 122.0], [963.0, 122.72727272727273], [965.0, 123.0], [967.0, 124.0], [973.0, 122.5], [971.0, 122.9375], [969.0, 122.6], [1007.0, 450.7037037037037], [1005.0, 326.8571428571429], [1003.0, 180.9090909090909], [1001.0, 180.0], [993.0, 179.78947368421052], [997.0, 179.42857142857142], [999.0, 180.5], [1017.0, 423.16], [1019.0, 324.1818181818182], [1021.0, 407.9444444444444], [1023.0, 359.6969696969697], [1009.0, 413.9354838709677], [1011.0, 364.5909090909091], [1013.0, 454.2105263157895], [1015.0, 363.8666666666666], [1030.0, 182.0], [1026.0, 311.5416666666667], [1034.0, 182.0], [1038.0, 181.66666666666666], [1074.0, 156.33333333333334], [1078.0, 156.78571428571428], [1046.0, 181.5], [1042.0, 181.14285714285714], [1054.0, 205.87500000000003], [1082.0, 436.6666666666667], [1086.0, 422.4090909090909], [1058.0, 175.0], [1062.0, 158.55555555555554], [1066.0, 157.33333333333334], [1070.0, 157.07142857142858], [1094.0, 157.79999999999995], [1090.0, 449.21739130434787], [1118.0, 158.5], [1114.0, 157.83333333333334], [1110.0, 379.6875], [1106.0, 500.0], [1102.0, 404.75], [1098.0, 157.85714285714286], [1142.0, 166.0], [1146.0, 136.72727272727272], [1150.0, 141.22222222222223], [1122.0, 159.0], [1126.0, 377.1935483870967], [1134.0, 160.0], [1130.0, 160.0], [1158.0, 298.6829268292683], [1170.0, 270.3636363636364], [1154.0, 410.030303030303], [1182.0, 174.25], [1178.0, 174.51724137931035], [1174.0, 174.57142857142858], [1162.0, 401.19999999999993], [1166.0, 426.19444444444434], [1202.0, 381.82758620689646], [1214.0, 166.08333333333334], [1186.0, 174.0], [1190.0, 143.6], [1194.0, 143.6842105263158], [1198.0, 144.0], [1210.0, 165.0], [1206.0, 165.5], [1218.0, 165.61111111111114], [1238.0, 453.17241379310343], [1234.0, 294.96226415094344], [1246.0, 166.76], [1222.0, 166.11999999999998], [1226.0, 166.0], [1230.0, 167.33333333333334], [1242.0, 166.0], [1266.0, 166.5], [1274.0, 167.16666666666666], [1278.0, 167.5], [1250.0, 385.3703703703704], [1254.0, 230.6538461538462], [1258.0, 393.6829268292683], [1262.0, 452.17647058823525], [1310.0, 519.9999999999999], [1302.0, 472.3333333333332], [1298.0, 145.0], [1306.0, 422.97499999999997], [1282.0, 164.75], [1286.0, 171.42857142857142], [1294.0, 134.50000000000003], [1290.0, 169.38888888888889], [1330.0, 176.25925925925927], [1334.0, 176.6086956521739], [1338.0, 176.4], [1342.0, 225.51999999999998], [1314.0, 175.5], [1318.0, 175.6], [1322.0, 176.20000000000002], [1326.0, 176.0], [1374.0, 185.75], [1362.0, 185.0], [1366.0, 184.5], [1370.0, 185.84615384615387], [1346.0, 350.24999999999994], [1350.0, 552.3846153846155], [1354.0, 396.0363636363636], [1358.0, 322.6363636363637], [1378.0, 187.44444444444446], [1382.0, 186.33333333333334], [1386.0, 186.5], [1390.0, 189.12500000000003], [1402.0, 189.69230769230768], [1398.0, 513.2666666666667], [1394.0, 384.9166666666666], [1438.0, 499.05555555555566], [1430.0, 590.8461538461538], [1426.0, 191.42857142857142], [1434.0, 563.8095238095237], [1414.0, 190.57142857142858], [1410.0, 190.25], [1418.0, 191.33333333333334], [1422.0, 191.25], [1458.0, 211.0], [1466.0, 200.4375], [1470.0, 217.35294117647058], [1442.0, 491.53846153846143], [1446.0, 555.6923076923077], [1450.0, 329.3793103448276], [1454.0, 466.7857142857143], [1474.0, 217.8], [1494.0, 556.8947368421053], [1490.0, 220.26315789473685], [1522.0, 521.5641025641025], [1502.0, 220.57142857142858], [1478.0, 218.42857142857144], [1486.0, 219.4], [1482.0, 218.7142857142857], [1498.0, 220.45], [1526.0, 487.1724137931033], [1530.0, 541.1818181818181], [1534.0, 434.53846153846155], [1506.0, 223.8], [1510.0, 200.0], [1514.0, 200.0], [1518.0, 202.53333333333333], [1550.0, 258.7], [1542.0, 474.05555555555554], [1562.0, 209.0], [1558.0, 208.0], [1538.0, 503.5], [1546.0, 283.3], [1586.0, 208.22222222222223], [1590.0, 209.0], [1594.0, 208.66666666666666], [1598.0, 208.2], [1570.0, 207.9230769230769], [1574.0, 208.55555555555554], [1582.0, 209.16666666666666], [1578.0, 208.72222222222223], [1610.0, 207.5], [1614.0, 381.0], [1630.0, 516.3043478260869], [1602.0, 208.92307692307693], [1606.0, 208.25], [1626.0, 481.49999999999994], [1622.0, 422.1538461538461], [1658.0, 150.875], [1654.0, 150.83333333333334], [1650.0, 151.5], [1662.0, 455.47999999999996], [1634.0, 512.9642857142858], [1638.0, 450.54999999999995], [1646.0, 204.28571428571433], [1642.0, 204.375], [1618.0, 490.12499999999994], [1678.0, 103.28571428571429], [1718.0, 229.21818181818168], [1694.0, 102.68888888888891], [1690.0, 103.53846153846152], [1686.0, 103.35714285714288], [1682.0, 103.93333333333332], [1666.0, 363.2285714285714], [1726.0, 74.64285714285712], [1722.0, 75.0], [1714.0, 307.84999999999997], [1674.0, 103.6], [1670.0, 103.88888888888887], [1698.0, 430.89189189189193], [1702.0, 484.4242424242424], [1706.0, 395.25], [1710.0, 513.7142857142858], [1778.0, 465.0], [1742.0, 546.5897435897436], [1738.0, 262.36], [1730.0, 73.4], [1782.0, 465.29999999999995], [1786.0, 445.2203389830509], [1790.0, 409.0625], [1762.0, 423.6666666666667], [1766.0, 421.1578947368421], [1746.0, 473.5365853658537], [1750.0, 440.3333333333333], [1758.0, 434.9545454545454], [1770.0, 485.3333333333333], [1774.0, 467.95000000000005], [1842.0, 382.08], [1798.0, 399.11764705882354], [1794.0, 284.0], [1806.0, 398.5], [1846.0, 205.0], [1850.0, 381.0], [1854.0, 455.61764705882354], [1826.0, 264.7307692307692], [1810.0, 368.3333333333333], [1818.0, 391.0], [1822.0, 264.59999999999997], [1830.0, 212.0], [1838.0, 382.6666666666667], [1834.0, 384.1818181818182], [1862.0, 467.47826086956513], [1878.0, 436.40624999999994], [1874.0, 395.4642857142857], [1858.0, 434.27659574468095], [1866.0, 461.99999999999994], [1870.0, 420.5135135135135], [1890.0, 335.49999999999994], [1918.0, 195.6], [1914.0, 198.33333333333334], [1910.0, 199.05882352941177], [1906.0, 148.85714285714283], [1902.0, 319.0], [1930.0, 446.5937499999999], [1926.0, 465.5], [1922.0, 193.5], [1950.0, 434.43478260869557], [1934.0, 143.5], [1970.0, 383.0555555555556], [1982.0, 269.6060606060606], [1978.0, 161.0], [1954.0, 486.809523809524], [1958.0, 465.2608695652174], [1962.0, 492.2531645569622], [1966.0, 498.73913043478245], [1942.0, 180.33333333333334], [1946.0, 491.41176470588243], [1990.0, 317.0824742268041], [1994.0, 394.3333333333333], [1986.0, 228.50000000000006], [1998.0, 234.658064516129], [1031.0, 182.0], [1075.0, 156.5], [1027.0, 253.0], [1035.0, 181.55555555555554], [1039.0, 181.4], [1051.0, 400.63999999999993], [1043.0, 182.0], [1055.0, 174.75], [1079.0, 386.4074074074074], [1087.0, 313.54999999999995], [1059.0, 175.4], [1067.0, 156.69230769230768], [1071.0, 156.5], [1091.0, 249.67999999999992], [1139.0, 137.0], [1107.0, 412.17948717948724], [1119.0, 159.09090909090912], [1115.0, 158.5625], [1111.0, 157.9], [1095.0, 276.0], [1099.0, 157.0], [1103.0, 158.0], [1147.0, 136.87499999999997], [1151.0, 162.57142857142858], [1123.0, 514.9999999999999], [1127.0, 297.4230769230769], [1131.0, 160.0], [1135.0, 160.0], [1155.0, 308.96875], [1163.0, 379.5], [1183.0, 174.0], [1179.0, 174.875], [1175.0, 233.71428571428572], [1171.0, 306.0], [1159.0, 357.85714285714295], [1167.0, 333.96341463414626], [1203.0, 397.7727272727273], [1207.0, 165.42857142857142], [1215.0, 165.5], [1187.0, 174.0], [1191.0, 142.0], [1195.0, 143.27272727272725], [1199.0, 146.0], [1211.0, 165.0], [1219.0, 166.1071428571429], [1275.0, 167.125], [1239.0, 361.13793103448273], [1235.0, 440.3461538461538], [1247.0, 230.8666666666667], [1223.0, 166.0], [1227.0, 167.0], [1231.0, 166.4], [1243.0, 166.99999999999997], [1279.0, 166.25], [1271.0, 166.9], [1267.0, 167.25], [1251.0, 400.5357142857143], [1255.0, 482.5652173913043], [1259.0, 331.06060606060606], [1263.0, 279.7631578947369], [1287.0, 171.0], [1335.0, 176.57142857142858], [1307.0, 501.9473684210527], [1303.0, 346.1428571428571], [1299.0, 170.42857142857142], [1295.0, 134.0], [1291.0, 136.0], [1283.0, 165.11111111111111], [1311.0, 175.71428571428572], [1331.0, 176.39999999999998], [1339.0, 177.0], [1343.0, 512.7812500000001], [1315.0, 175.5], [1319.0, 176.0], [1327.0, 176.25], [1323.0, 175.66666666666669], [1355.0, 194.5588235294117], [1351.0, 418.11111111111114], [1347.0, 560.4545454545455], [1375.0, 186.0], [1371.0, 186.33333333333334], [1359.0, 243.99999999999997], [1391.0, 426.0000000000001], [1387.0, 186.7142857142857], [1383.0, 186.5], [1379.0, 186.66666666666666], [1407.0, 190.0], [1403.0, 189.43999999999997], [1399.0, 378.94736842105266], [1395.0, 456.14634146341456], [1415.0, 191.375], [1463.0, 212.0], [1435.0, 480.73529411764713], [1427.0, 192.66666666666669], [1431.0, 534.5116279069769], [1439.0, 308.00000000000006], [1423.0, 191.0], [1419.0, 190.0], [1411.0, 190.5], [1459.0, 212.0], [1471.0, 217.0], [1443.0, 431.00000000000006], [1447.0, 442.59999999999997], [1451.0, 462.28888888888883], [1455.0, 356.15384615384613], [1503.0, 221.0769230769231], [1523.0, 507.83333333333337], [1491.0, 220.0], [1495.0, 552.5714285714288], [1499.0, 220.4117647058823], [1475.0, 217.28571428571428], [1479.0, 219.8], [1483.0, 218.55555555555554], [1487.0, 220.0], [1527.0, 540.5], [1531.0, 365.2307692307693], [1535.0, 548.1428571428571], [1507.0, 223.39999999999998], [1511.0, 200.66666666666669], [1515.0, 200.93333333333337], [1519.0, 213.65217391304347], [1539.0, 287.09999999999997], [1543.0, 407.73809523809535], [1567.0, 209.0], [1563.0, 208.9090909090909], [1559.0, 209.0], [1555.0, 208.0], [1547.0, 380.5384615384616], [1583.0, 534.3529411764706], [1579.0, 208.66666666666666], [1575.0, 208.83333333333334], [1571.0, 208.46153846153845], [1551.0, 208.53333333333333], [1587.0, 209.0], [1591.0, 208.0], [1595.0, 208.44444444444446], [1599.0, 208.28571428571428], [1611.0, 208.53124999999994], [1655.0, 151.22222222222223], [1631.0, 361.3000000000001], [1623.0, 487.51515151515156], [1619.0, 468.1199999999999], [1607.0, 208.16666666666666], [1603.0, 208.33333333333334], [1627.0, 491.79999999999995], [1615.0, 368.4642857142857], [1659.0, 150.7], [1651.0, 152.4], [1663.0, 518.3333333333334], [1635.0, 352.09523809523813], [1639.0, 445.0769230769231], [1643.0, 204.11111111111111], [1647.0, 204.5], [1667.0, 360.96428571428584], [1699.0, 522.8292682926831], [1695.0, 101.66666666666667], [1691.0, 103.0], [1687.0, 103.0], [1683.0, 104.18181818181819], [1719.0, 417.61538461538464], [1715.0, 421.1851851851851], [1679.0, 103.2], [1675.0, 103.73333333333332], [1671.0, 104.625], [1723.0, 74.4], [1703.0, 466.0000000000001], [1707.0, 216.13888888888889], [1711.0, 475.255319148936], [1731.0, 74.2], [1787.0, 453.54545454545456], [1779.0, 438.3333333333333], [1747.0, 463.0483870967742], [1743.0, 556.0588235294117], [1783.0, 458.5714285714285], [1791.0, 347.7857142857143], [1751.0, 440.3], [1759.0, 430.29729729729723], [1735.0, 73.0], [1739.0, 454.02631578947376], [1755.0, 437.6], [1771.0, 457.9574468085106], [1767.0, 420.5], [1763.0, 423.4117647058824], [1775.0, 406.26666666666665], [1799.0, 402.0], [1847.0, 380.1666666666667], [1795.0, 409.9090909090908], [1851.0, 467.17391304347825], [1855.0, 460.5384615384616], [1811.0, 364.7272727272727], [1815.0, 393.26086956521743], [1819.0, 35.0], [1831.0, 374.3], [1835.0, 383.6666666666667], [1863.0, 439.4888888888889], [1867.0, 466.0], [1859.0, 461.96], [1887.0, 342.00000000000006], [1883.0, 393.2222222222223], [1879.0, 382.68421052631584], [1875.0, 394.8823529411764], [1871.0, 478.61290322580646], [1899.0, 220.125], [1895.0, 261.4545454545455], [1891.0, 207.33333333333331], [1919.0, 192.94736842105257], [1915.0, 196.75], [1903.0, 144.48000000000002], [1935.0, 11.0], [1927.0, 349.3225806451613], [1951.0, 511.5555555555555], [1923.0, 191.0], [1931.0, 187.1], [1971.0, 165.33333333333334], [1983.0, 228.24242424242428], [1979.0, 163.25], [1975.0, 163.0], [1955.0, 282.82352941176464], [1959.0, 382.2777777777778], [1963.0, 403.3684210526316], [1967.0, 401.82758620689657], [1943.0, 182.75], [1939.0, 184.0], [1947.0, 355.1470588235293], [1991.0, 397.9672131147541], [1995.0, 289.5909090909091], [1987.0, 228.0], [1999.0, 235.49774774774778], [1.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1984.066824999996, 254.99043600001818]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 268907.06666666665, "minX": 1.58549064E12, "maxY": 2032179.5166666666, "series": [{"data": [[1.5854907E12, 2032179.5166666666], [1.58549064E12, 296834.55], [1.58549076E12, 1884040.8666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5854907E12, 1840976.8], [1.58549064E12, 268907.06666666665], [1.58549076E12, 1706782.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58549076E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 247.03374165905717, "minX": 1.58549064E12, "maxY": 349.6857045531949, "series": [{"data": [[1.5854907E12, 248.53523360532964], [1.58549064E12, 349.6857045531949], [1.58549076E12, 247.03374165905717]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58549076E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 247.03160387484365, "minX": 1.58549064E12, "maxY": 349.668956511865, "series": [{"data": [[1.5854907E12, 248.53287225926303], [1.58549064E12, 349.668956511865], [1.58549076E12, 247.03160387484365]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58549076E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.13537623975851762, "minX": 1.58549064E12, "maxY": 0.2934029749063279, "series": [{"data": [[1.5854907E12, 0.13537623975851762], [1.58549064E12, 0.2934029749063279], [1.58549076E12, 0.13658786382582766]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58549076E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.58549064E12, "maxY": 976.0, "series": [{"data": [[1.5854907E12, 445.0], [1.58549064E12, 976.0], [1.58549076E12, 457.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5854907E12, 197.0], [1.58549064E12, 197.0], [1.58549076E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5854907E12, 265.0], [1.58549064E12, 269.0], [1.58549076E12, 288.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5854907E12, 390.0], [1.58549064E12, 278.0], [1.58549076E12, 440.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5854907E12, 320.0], [1.58549064E12, 272.0], [1.58549076E12, 377.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58549076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 113.0, "minX": 293.0, "maxY": 720.0, "series": [{"data": [[8195.0, 238.0], [8311.0, 242.0], [8581.0, 236.0], [8445.0, 229.0], [8399.0, 237.0], [8517.0, 228.0], [8379.0, 242.0], [8349.0, 246.0], [8387.0, 235.0], [8553.0, 243.0], [8821.0, 239.0], [9173.0, 229.0], [9161.0, 238.0], [8789.0, 234.0], [8765.0, 245.0], [8893.0, 238.0], [8731.0, 237.0], [8969.0, 228.0], [9055.0, 232.0], [8967.0, 238.0], [9223.0, 231.0], [9225.0, 230.0], [9329.0, 235.0], [293.0, 720.0], [1298.0, 459.0], [1875.0, 463.0], [2352.0, 542.0], [3245.0, 519.0], [3618.0, 549.0], [3775.0, 510.0], [4644.0, 448.0], [5001.0, 113.0], [5356.0, 362.0], [5853.0, 358.0], [6147.0, 340.0], [6986.0, 248.0], [7663.0, 237.0], [7679.0, 242.0], [7676.0, 241.0], [7677.0, 252.0], [7667.0, 244.0], [7555.0, 238.0], [7598.0, 245.0], [7595.0, 239.0], [7591.0, 241.0], [7592.0, 242.0], [7594.0, 233.0], [7584.0, 235.0], [7574.0, 234.0], [7579.0, 234.0], [7577.0, 234.0], [7568.0, 245.0], [7564.0, 240.0], [7641.0, 247.0], [7539.0, 241.0], [7528.0, 230.0], [7498.0, 235.0], [7544.0, 236.0], [7543.0, 242.0], [7546.0, 239.0], [7547.0, 234.0], [7618.0, 233.0], [7551.0, 245.0], [7616.0, 241.0], [7637.0, 235.0], [7628.0, 235.0], [7619.0, 243.0], [7643.0, 246.0], [7647.0, 235.0], [7650.0, 242.0], [7651.0, 235.0], [7659.0, 238.0], [7872.0, 254.0], [7832.0, 254.0], [7843.0, 240.0], [7851.0, 242.0], [7680.0, 238.0], [7762.0, 250.0], [7773.0, 250.0], [7912.0, 231.0], [7695.0, 233.0], [7729.0, 239.0], [7709.0, 238.0], [7701.0, 242.0], [7694.0, 239.0], [7935.0, 235.0], [7834.0, 241.0], [7965.0, 255.0], [8000.0, 249.0], [8025.0, 244.0], [7970.0, 242.0], [8030.0, 245.0], [8035.0, 243.0], [8049.0, 245.0], [7978.0, 251.0], [8133.0, 241.0], [8153.0, 233.0], [8176.0, 244.0], [8144.0, 239.0], [8029.0, 242.0], [8026.0, 242.0], [7966.0, 247.0], [8178.0, 233.0], [8067.0, 237.0], [8186.0, 245.0], [8083.0, 246.0], [8640.0, 237.0], [8324.0, 247.0], [8322.0, 245.0], [8456.0, 233.0], [8474.0, 242.0], [8356.0, 236.0], [8232.0, 237.0], [8708.0, 239.0], [9058.0, 231.0], [8724.0, 233.0], [8938.0, 237.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9329.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 113.0, "minX": 293.0, "maxY": 720.0, "series": [{"data": [[8195.0, 238.0], [8311.0, 242.0], [8581.0, 236.0], [8445.0, 229.0], [8399.0, 237.0], [8517.0, 228.0], [8379.0, 242.0], [8349.0, 246.0], [8387.0, 235.0], [8553.0, 243.0], [8821.0, 239.0], [9173.0, 229.0], [9161.0, 238.0], [8789.0, 234.0], [8765.0, 245.0], [8893.0, 238.0], [8731.0, 237.0], [8969.0, 228.0], [9055.0, 232.0], [8967.0, 238.0], [9223.0, 231.0], [9225.0, 230.0], [9329.0, 235.0], [293.0, 720.0], [1298.0, 459.0], [1875.0, 463.0], [2352.0, 542.0], [3245.0, 519.0], [3618.0, 549.0], [3775.0, 510.0], [4644.0, 448.0], [5001.0, 113.0], [5356.0, 362.0], [5853.0, 358.0], [6147.0, 340.0], [6986.0, 248.0], [7663.0, 237.0], [7679.0, 242.0], [7676.0, 241.0], [7677.0, 252.0], [7667.0, 244.0], [7555.0, 238.0], [7598.0, 245.0], [7595.0, 239.0], [7591.0, 241.0], [7592.0, 242.0], [7594.0, 233.0], [7584.0, 235.0], [7574.0, 234.0], [7579.0, 234.0], [7577.0, 234.0], [7568.0, 245.0], [7564.0, 240.0], [7641.0, 247.0], [7539.0, 241.0], [7528.0, 230.0], [7498.0, 235.0], [7544.0, 236.0], [7543.0, 242.0], [7546.0, 239.0], [7547.0, 234.0], [7618.0, 233.0], [7551.0, 245.0], [7616.0, 241.0], [7637.0, 235.0], [7628.0, 235.0], [7619.0, 243.0], [7643.0, 246.0], [7647.0, 235.0], [7650.0, 242.0], [7651.0, 235.0], [7659.0, 238.0], [7872.0, 254.0], [7832.0, 254.0], [7843.0, 240.0], [7851.0, 242.0], [7680.0, 238.0], [7762.0, 250.0], [7773.0, 250.0], [7912.0, 231.0], [7695.0, 233.0], [7729.0, 239.0], [7709.0, 238.0], [7701.0, 242.0], [7694.0, 239.0], [7935.0, 235.0], [7834.0, 241.0], [7965.0, 255.0], [8000.0, 249.0], [8025.0, 244.0], [7970.0, 242.0], [8030.0, 245.0], [8035.0, 243.0], [8049.0, 245.0], [7978.0, 251.0], [8133.0, 241.0], [8153.0, 233.0], [8176.0, 244.0], [8144.0, 239.0], [8029.0, 242.0], [8026.0, 242.0], [7966.0, 247.0], [8178.0, 233.0], [8067.0, 237.0], [8186.0, 245.0], [8083.0, 246.0], [8640.0, 237.0], [8324.0, 247.0], [8322.0, 245.0], [8456.0, 233.0], [8474.0, 242.0], [8356.0, 236.0], [8232.0, 237.0], [8708.0, 239.0], [9058.0, 231.0], [8724.0, 233.0], [8938.0, 237.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9329.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1207.6, "minX": 1.58549064E12, "maxY": 8039.2, "series": [{"data": [[1.5854907E12, 8039.2], [1.58549064E12, 1207.6], [1.58549076E12, 7419.866666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58549076E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1174.2666666666667, "minX": 1.58549064E12, "maxY": 8039.2, "series": [{"data": [[1.5854907E12, 8039.2], [1.58549064E12, 1174.2666666666667], [1.58549076E12, 7453.2]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58549076E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1174.2666666666667, "minX": 1.58549064E12, "maxY": 8039.2, "series": [{"data": [[1.5854907E12, 8039.2], [1.58549064E12, 1174.2666666666667], [1.58549076E12, 7453.2]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58549076E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1174.2666666666667, "minX": 1.58549064E12, "maxY": 8039.2, "series": [{"data": [[1.5854907E12, 8039.2], [1.58549064E12, 1174.2666666666667], [1.58549076E12, 7453.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58549076E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

